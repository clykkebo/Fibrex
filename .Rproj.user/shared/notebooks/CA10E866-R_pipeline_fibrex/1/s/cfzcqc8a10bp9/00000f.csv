"0",""
"0","# Rarefaction curves"
"0","Rcurve_data <- function(physeq, ntables=10, step=250,maxdepth = max(sample_sums(physeq)), methods=c(""Observed"",""Chao1"",""ACE"",""Shannon""), seedstart=500, verbose=FALSE) {"
"0","  require(""vegan"")"
"0","  "
"0","  # prep list of "
"0","  step.seq <- seq(from = 1, to = maxdepth, by = step)"
"0","  "
"0","  # Calculate alpha diversity"
"0","  rare_tab <- lapply(step.seq,function(k) Calculate_alpha_div(physeq = physeq, ntables = ntables, depth = k, methods = methods, seedstart = seedstart, verbose = verbose))"
"0","    "
"0","  # Format table"
"0","  rare_tab <- do.call(rbind, rare_tab)"
"0","  "
"0","  return(rare_tab)"
"0","}"
"0",""
"0","# Calculate alpha diversity"
"0","Calculate_alpha_div <- function(physeq, ntables=100, depth = round(min(sample_sums(physeq))*0.9), methods=c(""Observed"",""Chao1"",""ACE"",""Shannon""), seedstart=500, verbose=FALSE) {"
"0","  require(""vegan"")"
"0","  "
"0","  # remove samples below depth"
"0","  phy.use <- prune_samples(sample_sums(physeq) >= depth, physeq )"
"0","  "
"0","  # Orientate the OTU correctly"
"0","  if (taxa_are_rows(phy.use)){otu.tab<-unclass(t(otu_table(phy.use)))} else otu.tab <- unclass(otu_table(phy.use))"
"0","  "
"0","  # Rarefaction function"
"0","  rarefy <- function(x, depth) {"
"0","    y <- sample(rep(1:length(x), x), depth)"
"0","    y.tab <- table(y)"
"0","    j <- numeric(length(x))"
"0","    j[as.numeric(names(y.tab))] <- y.tab"
"0","    j"
"0","  }"
"0","  "
"0","  # Table to output alpha diversity table"
"0","  Alpha_diversity = data.frame(row.names = row.names(otu.tab))"
"0","  "
"0","  for (i in seq(length(methods))){"
"0","    Alpha_diversity[,methods[i]] <- numeric(length = nrow(otu.tab))"
"0","    Alpha_diversity[,paste0(methods[i],""_sd"")] <- numeric(length = nrow(otu.tab))"
"0","  }"
"0","  "
"0","  # Run each sample separately"
"0","  for (z in 1:nrow(otu.tab)) {"
"0","    if (verbose==TRUE) {"
"0","      print(paste(""Rarefaction sample number"", z, sep="" ""))"
"0","    }"
"0","    numbers <- otu.tab[z,]"
"0","    "
"0","    # Rarefy the sample ntables times"
"0","    set.seed(seedstart + z)"
"0","    rare_tab <- lapply(1:ntables,function(k) rarefy(numbers,depth))"
"0","    "
"0","    # Format table"
"0","    rare_tab <- do.call(rbind, rare_tab)"
"0","    "
"0","    # Calculate Observed richness, Chao1, and ACE."
"0","    adiv <- data.frame(t(estimateR(rare_tab)))"
"0","    "
"0","    if (""Observed"" %in% methods){"
"0","      Alpha_diversity$Observed_sd[z] <- sd(adiv$S.obs)"
"0","    }"
"0","    "
"0","      # Save mean and sd of observed richness"
"0","      Alpha_diversity$Chao1[z] <- mean(adiv$S.chao1)"
"0","      Alpha_diversity$Chao1_sd[z] <- sd(adiv$S.chao1)"
"0","    }"
"0","    "
"0","    if (""ACE"" %in% methods){"
"0","      # Save mean and sd of observed richness"
"0","      Alpha_diversity$ACE[z] <- mean(adiv$se.ACE)"
"0","      Alpha_diversity$ACE_sd[z] <- sd(adiv$se.ACE)"
"0","    }"
"0","    "
"0","    if (""Shannon"" %in% methods){"
"0","      # Calculate observed richness for each rep of sample z"
"0","      adiv <- diversity(rare_tab, index = ""shannon"")"
"0","      "
"0","      # Save mean and sd of observed richness"
"0","      Alpha_diversity$Shannon[z] <- mean(adiv)"
"0","    }"
"0","    "
"0","    if (""Simpson"" %in% methods){"
"0","      # Calculate observed richness for each rep of sample z"
"0","      adiv <- diversity(rare_tab, index = ""simpson"")"
"0","      # Save mean and sd of observed richness"
"0","      Alpha_diversity$Simpson[z] <- mean(adiv)"
"0","      Alpha_diversity$Simpson_sd[z] <- sd(adiv)"
"0","    }"
"0","    "
"0","    if (""Evenness"" %in% methods){"
"0","      # Calculate observed richness for each rep of sample z"
"0","      sha <- diversity(rare_tab, index = ""shannon"")"
"0","      obs <- rowSums(rare_tab != 0)"
"0","      adiv <- sha/log(obs)"
"0","      # Save mean and sd of observed richness"
"0","      Alpha_diversity$Evenness[z] <- mean(adiv)"
"0","      Alpha_diversity$Evenness_sd[z] <- sd(adiv)"
"0","    }"
"0","    "
"0","  }"
"0",""
"0","  # Add alpha diversity to sample data"
"0","  output <- cbind(sample_data(phy.use),Alpha_diversity)"
"0","  output$depth = depth"
"0","  # Return physeq to the environment"
"0","  return(output) "
"0","}"
"0",""
"0","# save functions"
"0","save(Calculate_alpha_div, Rcurve_data, file = ""scripts/adiv.Rdata"")"
"0",""
"0","# clear the environment and release memory"
"0","rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects."
"0","invisible(gc()) #free up memory and report the memory usage."
"0",""
