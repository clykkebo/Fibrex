library(pals)
library(ggpubr)
library(vegan)
library(phangorn)
library(kableExtra)
library(plotly)
library(rstatix)
library(forcats)
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(DAtest)
library(ggrepel)
# Save params
saveRDS(params, file = "R_objects/animal_params.RDS")
# load data
load("R_objects/consumption_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Subset
dat.clean <- subset(dat, !cage == 21)
# Set names of variables
PREDICTOR <- "feedtreat"
OUTCOME <- "cal_cage_day_avr_g"
SUBJECT <- "cage"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
# Set variables for inner and outer analysis, and variable for facet
INNER.VAR <- "treatment"
OUTER.VAR <- "feed"
FACETVAR <- "dissection"
# Statistics costumed for facet plotting
## Pairwise comparison for inner variable
stat.in <- dat.clean %>%
group_by(.data[[OUTER.VAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~",INNER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
# adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
## Pairwise comparison for outer variable
stat.out <- dat.clean %>%
# group_by(.data[[FACETVAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~", OUTER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
# adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
## Calculate positions statistics on plot
stat.in <- stat.in %>% add_xy_position(x = OUTER.VAR, dodge = 0.8)
stat.out <- stat.out %>% add_xy_position(x = OUTER.VAR)
stat.out$y.position <- max(stat.in$y.position)*1.1
# Sort dat.clean
dat.clean <- dat.clean[order(dat.clean$feedtreat),]
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = PREDICTOR,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Kcal intake per day per cage (g)",limits = c(80,240),breaks = seq(80,240,20)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p <- p + stat_pvalue_manual(stat.in, label = "p.format",tip.length = 0, hide.ns = FALSE)+
stat_pvalue_manual(stat.out, label = "p.format", tip.length = 0, hide.ns = FALSE)
p
# Plot for saving without legend
p2 <- p + theme(legend.position = "none")
# Output plot
ggsave(filename = paste0("plots/animal_data/consumption/",OUTCOME,"_plot.png"), p2, device = "png", dpi = 300, units = "mm", width = 100, height = 100)
ggsave(filename = paste0("plots/animal_data/consumption/",OUTCOME,"_plot.pdf"), p2, device = "pdf", dpi = 300, units = "mm", width = 100, height = 100)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
invisible(gc()) #free up memory and report the memory usage.
# load data
load("R_objects/consumption_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Subset
dat.clean <- subset(dat, !cage == 21)
# Set names of variables
PREDICTOR <- c("dissection","treatment","feed")
OUTCOME <- "feed_cage_day_avr_g"
SUBJECT <- "cage"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
# Set variables for inner and outer analysis, and variable for facet
INNER.VAR <- "treatment"
OUTER.VAR <- "feed"
FACETVAR <- "dissection"
# Statistics for facet by compound
stat.in <- dat.clean %>%
group_by(.data[[FACETVAR]],.data[[OUTER.VAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~",INNER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
stat.out <- dat.clean %>%
group_by(.data[[FACETVAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~", OUTER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
stat.out
## Calculate positions statistics on plot
stat.in <- stat.in %>% add_xy_position(x = OUTER.VAR, dodge = 0.8)
stat.out <- stat.out %>% add_xy_position(x = OUTER.VAR)
stat.out$y.position <- max(stat.in$y.position)*1.1
# Sort dat.clean
dat.clean <- dat.clean[order(dat.clean$feedtreat),]
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = "dissection",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)",limits = c(80,240),breaks = seq(80,240,20)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p <- p + stat_pvalue_manual(stat.in, label = "p.format",tip.length = 0, hide.ns = FALSE)+
stat_pvalue_manual(stat.out, label = "p.format", tip.length = 0, hide.ns = FALSE)
p
# load data
load("R_objects/consumption_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Subset
dat.clean <- subset(dat, !cage == 21)
# Set names of variables
PREDICTOR <- c("dissection","treatment","feed")
OUTCOME <- "feed_cage_day_avr_g"
SUBJECT <- "cage"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
# Set variables for inner and outer analysis, and variable for facet
INNER.VAR <- "treatment"
OUTER.VAR <- "feed"
FACETVAR <- "dissection"
# Statistics for facet by compound
stat.in <- dat.clean %>%
group_by(.data[[FACETVAR]],.data[[OUTER.VAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~",INNER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
stat.out <- dat.clean %>%
group_by(.data[[FACETVAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~", OUTER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
stat.out
## Calculate positions statistics on plot
stat.in <- stat.in %>% add_xy_position(x = OUTER.VAR, dodge = 0.8)
stat.out <- stat.out %>% add_xy_position(x = OUTER.VAR)
stat.out$y.position <- max(stat.in$y.position)*1.1
# Sort dat.clean
dat.clean <- dat.clean[order(dat.clean$feedtreat),]
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = "dissection",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)",limits = c(80,240),breaks = seq(80,240,20)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p <- p + stat_pvalue_manual(stat.in, label = "p.format",tip.length = 0, hide.ns = FALSE)+
stat_pvalue_manual(stat.out, label = "p.format", tip.length = 0, hide.ns = FALSE)
p
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = "dissection",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)",limits = c(80,240),breaks = seq(80,240,20)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p
# load data
load("R_objects/consumption_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Subset
dat.clean <- subset(dat, !cage == 21)
# Set names of variables
PREDICTOR <- c("feed","treatment","dissection")
OUTCOME <- "feed_cage_day_avr_g"
SUBJECT <- "cage"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
# Set variables for inner and outer analysis, and variable for facet
INNER.VAR <- "treatment"
OUTER.VAR <- "feed"
FACETVAR <- "dissection"
# Statistics for facet by compound
stat.in <- dat.clean %>%
group_by(.data[[FACETVAR]],.data[[OUTER.VAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~",INNER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
stat.out <- dat.clean %>%
group_by(.data[[FACETVAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~", OUTER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
stat.out
## Calculate positions statistics on plot
stat.in <- stat.in %>% add_xy_position(x = OUTER.VAR, dodge = 0.8)
stat.out <- stat.out %>% add_xy_position(x = OUTER.VAR)
stat.out$y.position <- max(stat.in$y.position)*1.1
# Sort dat.clean
dat.clean <- dat.clean[order(dat.clean$feedtreat),]
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = "dissection",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)",limits = c(80,240),breaks = seq(80,240,20)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = FACETVAR,
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)",limits = c(80,240),breaks = seq(80,240,20)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = FACETVAR,
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)") +
guides(color = "none") +
theme(axis.title.x = element_blank())
p
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = FACETVAR,
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)",limits = c(20,60),breaks = seq(20,60,5)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = FACETVAR,
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)",limits = c(30,60),breaks = seq(30,60,5)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p
p <- p + stat_pvalue_manual(stat.in, label = "p.format",tip.length = 0, hide.ns = FALSE)+
stat_pvalue_manual(stat.out, label = "p.format", tip.length = 0, hide.ns = FALSE)
p
# Set variables for inner and outer analysis, and variable for facet
INNER.VAR <- "treatment"
OUTER.VAR <- "feed"
FACETVAR <- "dissection"
# Statistics for facet by compound
stat.in <- dat.clean %>%
group_by(.data[[FACETVAR]],.data[[OUTER.VAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~",INNER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
stat.out <- dat.clean %>%
group_by(.data[[FACETVAR]]) %>%
t_test(as.formula(paste(OUTCOME,"~", OUTER.VAR, sep = " ")),
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
stat.out
## Calculate positions statistics on plot
stat.in <- stat.in %>% add_xy_position(x = OUTER.VAR, dodge = 0.8)
stat.out <- stat.out %>% add_xy_position(x = OUTER.VAR)
stat.out$y.position <- max(stat.in$y.position)*1.1
# Sort dat.clean
dat.clean <- dat.clean[order(dat.clean$feedtreat),]
# Create plot
p <- ggboxplot(dat.clean, x = OUTER.VAR, y = OUTCOME,
color = "feedtreat",
fill = "feedtreat",
add =  "jitter",
facet.by = FACETVAR,
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL1, name = "Group", labels = c("HF_CTRL" = "HF-CTRL","HF_PFOS" = "HF-PFOS","LF_CTRL" = "LF-CTRL","LF_PFOS" = "LF-PFOS")) +
scale_color_manual(values = c("black","black","black","black")) +
scale_y_continuous(name = "Feed consumed per day per cage (g)",limits = c(30,60),breaks = seq(30,60,5)) +
guides(color = "none") +
theme(axis.title.x = element_blank())
p
p <- p + stat_pvalue_manual(stat.in, label = "p.format",tip.length = 0, hide.ns = FALSE)+
stat_pvalue_manual(stat.out, label = "p.format", tip.length = 0, hide.ns = FALSE)
p
# # Plot for saving without legend
# p2 <- p + theme(legend.position = "none")
# Output plot
ggsave(filename = paste0("plots/animal_data/consumption/",OUTCOME,"_nested_plot.png"), p, device = "png", dpi = 300, units = "mm", width = 100, height = 100)
ggsave(filename = paste0("plots/animal_data/consumption/",OUTCOME,"_nested_plot.pdf"), p, device = "pdf", dpi = 300, units = "mm", width = 100, height = 100)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
invisible(gc()) #free up memory and report the memory usage.
