p
# Plot for saving without legend
p2 <- p + theme(legend.position = "none")
# Output plot
ggsave(filename = paste0("plots/animal_data/weight/",OUTCOME,"_plot.png"), p2, device = "png", dpi = 300, units = "mm", width = 100, height = 100)
ggsave(filename = paste0("plots/animal_data/weight/",OUTCOME,"_plot.pdf"), p2, device = "pdf", dpi = 300, units = "mm", width = 100, height = 100)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
invisible(gc()) #free up memory and report the memory usage.
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
#dat.clean <- dat
dat.clean <- dat %>% select_if(~ !any(is.na(.)))
#dat.clean <- subset(dat, !dat$rat_name %in% c("R01","R30"))
# Set names of variables
PREDICTOR <- "feedtreat"#c("treatment","pfos","van")
OUTCOME <- "bw_gain021"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Subset
dat.clean <- subset(dat, !is.na(bw_gain021))
# Set names of variables
PREDICTOR <- "feedtreat"#c("treatment","pfos","van")
OUTCOME <- "bw_gain021"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
## Prepare statistical information:
pwc.adj <- pwc %>%
add_x_position(x = PREDICTOR) %>%
p_format("p.adj", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
# Format for ggplot
if (sum(pwc.adj$p.adj.signif != "ns") == 0) {
stat.sig <- pwc.adj %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
} else {
stat.sig <- pwc.adj[pwc.adj$p.adj.signif != "ns",] %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
}
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "Bodyweight gain",limits = c(10,35),breaks = seq(10,35,5), labels = function(x) paste0(x, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "Bodyweight gain",limits = c(30,70),breaks = seq(30,70,5), labels = function(x) paste0(x, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "Bodyweight gain",limits = c(30,70),breaks = seq(30,70,10), labels = function(x) paste0(x, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE)
p
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "Bodyweight gain",limits = c(30,75),breaks = seq(30,75,10), labels = function(x) paste0(x, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE)
p
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "Bodyweight gain",limits = c(30,80),breaks = seq(30,80,10), labels = function(x) paste0(x, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE)
p
## Prepare statistical information:
pwc.adj <- pwc %>%
add_x_position(x = PREDICTOR) %>%
p_format("p.adj", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
# Format for ggplot
if (sum(pwc.adj$p.adj.signif != "ns") == 0) {
stat.sig <- pwc.adj %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
} else {
stat.sig <- pwc.adj[pwc.adj$p.adj.signif != "ns",] %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
}
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "Bodyweight gain",limits = c(30,80),breaks = seq(30,80,10), labels = function(x) paste0(x, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE)
p
# Plot for saving without legend
p2 <- p + theme(legend.position = "none")
# Output plot
ggsave(filename = paste0("plots/animal_data/weight/",OUTCOME,"_plot.png"), p2, device = "png", dpi = 300, units = "mm", width = 100, height = 100)
ggsave(filename = paste0("plots/animal_data/weight/",OUTCOME,"_plot.pdf"), p2, device = "pdf", dpi = 300, units = "mm", width = 100, height = 100)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
invisible(gc()) #free up memory and report the memory usage.
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Subset
dat.clean <- subset(dat, !is.na(bw_gain021))
# Set names of variables
PREDICTOR <- "feedtreat"#c("treatment","pfos","van")
OUTCOME <- "bw_gain821"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Subset
dat.clean <- subset(dat, !is.na(bw_gain821))
# Set names of variables
PREDICTOR <- "feedtreat"#c("treatment","pfos","van")
OUTCOME <- "bw_gain821"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
pwc.adj <- pwc %>%
add_x_position(x = PREDICTOR) %>%
p_format("p.adj", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
# Format for ggplot
if (sum(pwc.adj$p.adj.signif != "ns") == 0) {
stat.sig <- pwc.adj %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
} else {
stat.sig <- pwc.adj[pwc.adj$p.adj.signif != "ns",] %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
}
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "Bodyweight gain",limits = c(10,40),breaks = seq(10,40,5), labels = function(x) paste0(x, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE)
p
## Prepare statistical information:
pwc.adj <- pwc %>%
add_x_position(x = PREDICTOR) %>%
p_format("p.adj", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
# Format for ggplot
if (sum(pwc.adj$p.adj.signif != "ns") == 0) {
stat.sig <- pwc.adj %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
} else {
stat.sig <- pwc.adj[pwc.adj$p.adj.signif != "ns",] %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
}
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "Bodyweight gain",limits = c(10,40),breaks = seq(10,40,5), labels = function(x) paste0(x, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE)
p
# Plot for saving without legend
p2 <- p + theme(legend.position = "none")
# Output plot
ggsave(filename = paste0("plots/animal_data/weight/",OUTCOME,"_plot.png"), p2, device = "png", dpi = 300, units = "mm", width = 100, height = 100)
ggsave(filename = paste0("plots/animal_data/weight/",OUTCOME,"_plot.pdf"), p2, device = "pdf", dpi = 300, units = "mm", width = 100, height = 100)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
invisible(gc()) #free up memory and report the memory usage.
# load data
load("R_objects/animal_data.Rdata")
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- subset(dat, !is.na(cecum_norm))
# Set names of variables
PREDICTOR <- "feedtreatday"#c("treatment","pfos","van")
OUTCOME <- "cecum_norm"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
## Prepare statistical information:
pwc.adj <- pwc %>%
add_x_position(x = PREDICTOR) %>%
p_format("p.adj", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
# Format for ggplot
if (sum(pwc.adj$p.adj.signif != "ns") == 0) {
stat.sig <- pwc.adj %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
} else {
stat.sig <- pwc.adj[pwc.adj$p.adj.signif != "ns",] %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
}
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "% difference",limits = c(0.5,3.1),breaks = seq(0.5,3.1,0.5), labels = function(x) paste0(x*100, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE, y.position = c(2.2,2.8,2.5,3.1))
p
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "% difference",limits = c(0.5,3.5),breaks = seq(0.5,3.5,0.5), labels = function(x) paste0(x*100, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE, y.position = c(2.2,2.8,2.5,3.1))
p
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL) +
scale_y_continuous(name = "% difference",limits = c(0.5,3.5),breaks = seq(0.5,3.5,0.5), labels = function(x) paste0(x*100, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE)
p
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(decontam)
library(pals)
library(ggpubr)
library(vegan)
library(phangorn)
library(kableExtra)
library(plotly)
library(rstatix)
library(forcats)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggbreak)
# Create used folders if missing
if (!file.exists("R_objects")) dir.create(file.path(getwd(), "R_objects"))
if (!file.exists("plots")) dir.create(file.path(getwd(), "plots"))
if (!file.exists("plots/animal_data")) dir.create(file.path(getwd(), "plots/animal_data"))
if (!file.exists("scripts")) dir.create(file.path(getwd(), "scripts"))
# Save params
saveRDS(params, file = "R_objects/animal_params.RDS")
params <- readRDS("R_objects/animal_params.RDS")
# Load analysis data
dat <- read.csv(params$input, header = TRUE, sep = ";", dec = ",")
save(dat, file = "R_objects/animal_data.Rdata")
# clear the environment and release memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
invisible(gc()) #free up memory and report the memory usage.
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- subset(dat, !is.na(cecum_norm))
# Set names of variables
PREDICTOR <- "feedtreatday"#c("treatment","pfos","van")
OUTCOME <- "cecum_norm"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL2)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
## Prepare statistical information:
pwc.adj <- pwc %>%
add_x_position(x = PREDICTOR) %>%
p_format("p.adj", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
# Format for ggplot
if (sum(pwc.adj$p.adj.signif != "ns") == 0) {
stat.sig <- pwc.adj %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
} else {
stat.sig <- pwc.adj[pwc.adj$p.adj.signif != "ns",] %>%
add_y_position(step.increase = 0.25) %>%
mutate(y.position = seq(min(y.position), max(y.position),length.out = n()))
}
# Create plot
p <- ggboxplot(dat.clean, x = PREDICTOR, y = OUTCOME,
fill = PREDICTOR,
add =  "jitter",
add.params = list(size = 1)) +
scale_fill_manual(values = params$COL2) +
scale_y_continuous(name = "% difference",limits = c(0.5,3.5),breaks = seq(0.5,3.5,0.5), labels = function(x) paste0(x*100, "%")) +
labs(fill = "Treatment") +
scale_x_discrete(name = "Treatment")
p <- p + stat_pvalue_manual(stat.sig, label = "p.adj.format",tip.length = 0, hide.ns = TRUE)
p
