theme(axis.title.x=element_blank()) +
geom_smooth(aes(group = feed, color = feed), method = "lm", se = FALSE, size = 0.5, fullrange = TRUE, linetype = "dashed")
# Add statistics
p.stat <- p +
stat_pvalue_manual(stat.in, label = "p.signif", tip.length = 0.01, hide.ns = FALSE) +
stat_pvalue_manual(pwc2, label = "p.adj.signif", tip.length = 0.01, hide.ns = FALSE, y.position = c(24,25,23)) +
scale_y_continuous(name ="pct PFOS", expand = expansion(mult = c(0.01, 0.1)), limits = c(10,25), breaks = seq(10,25,5)) +
annotate("text", x = 3, y = 20, label = paste("No fibre slope: ",round(reg_lines$slope[1],2)," pct/day")) +
annotate("text", x = 3, y = 19, label = paste("Fibre slope: ",round(reg_lines$slope[2],2)," pct/day"))
# View the final plot
p.stat
summary(dat.clean$pct)
# Add statistics
p.stat <- p +
stat_pvalue_manual(stat.in, label = "p.signif", tip.length = 0.01, hide.ns = FALSE) +
stat_pvalue_manual(pwc2, label = "p.adj.signif", tip.length = 0.01, hide.ns = FALSE, y.position = c(24,25,23)) +
scale_y_continuous(name ="pct PFOS", expand = expansion(mult = c(0.01, 0.1)), limits = c(13,25), breaks = seq(13,25,2)) +
annotate("text", x = 3, y = 20, label = paste("No fibre slope: ",round(reg_lines$slope[1],2)," pct/day")) +
annotate("text", x = 3, y = 19, label = paste("Fibre slope: ",round(reg_lines$slope[2],2)," pct/day"))
# View the final plot
p.stat
# Load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Set parameters
PREDICTOR <- "day"#c("day","feed")
OUTCOME <- "conc"
SUBJECT <- "rat_name"
#rat_name, feed, treatment, feedtreat, dissection, bw_8, bw_21, bloodvol_8, bloodvol_16, bloodvol_21, pfos_total_mg, pfos_serum8_ugml, pfos_serum8_mg, pfos_serum8_pct, pfos_serum16_ugml, pfos_serum16_mg, pfos_serum16_pct, pfos_serum21_ugml, pfos_serum21_mg, pfos_serum21_pct
# Create data frame for data representation
dat.clean <- dat %>% select(rat_name, feed, treatment, feedtreat, dissection, bw_8, bw_21, pfos_total_mg, pfos_urine8_ugml, pfos_urine16_ugml, pfos_urine21_ugml) %>%
pivot_longer(., cols = c(pfos_urine8_ugml, pfos_urine16_ugml, pfos_urine21_ugml), names_to = "pfos_day", values_to = "conc")
# Create column for day of sampling
dat.clean <- dat.clean %>%
mutate("day" = case_when(pfos_day == "pfos_urine8_ugml" ~ "d08",
pfos_day == "pfos_urine16_ugml" ~ "d16",
pfos_day == "pfos_urine21_ugml" ~ "d21"))
# Order dataframe for analysis
dat.clean <- dat.clean[order(dat.clean$day),]
# Remove rows with NA
dat.clean <- subset(dat.clean, !is.na(conc))
# Subset to only PFOS groups
dat.clean <- subset(dat.clean, dat.clean$treatment == "PFOS")
# Subset extreme outliers
dat.clean <- subset(dat.clean, !dat.clean$rat_name %in% c("R24","R46"))
dat.clean
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = "jco")
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
res.aov <- dat.clean %>% kruskal_test(FORMULA)
res.aov
dat.clean %>% kruskal_effsize(FORMULA)
# pairwise comparisons
pwc <- dat.clean %>%
dunn_test(FORMULA, p.adjust.method = "fdr")
pwc
# Set variables for inner and outer analyses
INNER.VAR <- "feed"
OUTER.VAR <- "day"
# Statistics costumed for facet plotting
## Pairwise comparison for inner variable
stat.in <- dat.clean %>%
group_by(.data[[OUTER.VAR]]) %>%
wilcox_test(as.formula(paste("conc ~", INNER.VAR, sep = " "))) %>%
adjust_pvalue(method = "BH") %>%
add_significance("p.adj") %>%
add_xy_position(x = OUTER.VAR, dodge = 0.8) %>%
p_format("p.adj", accuracy = 0.0001, trailing.zero = TRUE, new.col = TRUE)
stat.in
## Pairwise comparison for outer variable
stat.out <- dat.clean %>%
kruskal_test(conc ~ day) %>%
# dunn_test(conc ~ day, p.adjust.method = "fdr") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
pwc2 <- dat.clean %>%
# kruskal_test(conc ~ day) %>%
dunn_test(conc ~ day, p.adjust.method = "fdr") %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc2
## Calculate positions statistics on plot
stat.in <- stat.in %>% add_xy_position(x = "day", dodge = 0.8)
pwc2 <- pwc2 %>% add_xy_position(x = "day")
pwc2$y.position <- max(stat.in$y.position)*1.1
# # Calculate slope and intercept for each group
# reg_lines <- dat.clean %>%
#   group_by(feed) %>%
#   summarize(slope = coef(lm(conc ~ day))[2],
#             intercept = coef(lm(conc ~ day))[1])
#
# Create ggboxplot with regression lines for feed types and slope values as text
p <- ggboxplot(dat.clean, x = "day", y = "conc",
fill = "feed",
color = "feed",
add = "jitter",
add.params = list(size = 1)) +
theme_pubr(legend = "top") +
scale_fill_manual(values = params$COLFEED, labels = c("No fibre","Fibre"), name = "Feed") +
scale_color_manual(breaks = dat.clean$feed, values = c("A" = "#000040","B" = "#004000")) +
scale_x_discrete(name = "Day", labels = c("Day 8","Day 16","Day 21")) +
guides(color = FALSE) +
theme(axis.title.x=element_blank())
# geom_smooth(aes(group = feed, color = feed), method = "lm", se = FALSE, size = 0.5, fullrange = TRUE, linetype = "dashed") +
# annotate("text", x = 3, y = 65, label = paste("No fibre slope: ",round(reg_lines$slope[1],2)," µg/mL/day")) +
# annotate("text", x = 3, y = 62, label = paste("Fibre slope: ",round(reg_lines$slope[2],2)," µg/mL/day"))
# Add statistics
p.stat <- p +
stat_pvalue_manual(stat.in, label = "p.adj.signif", tip.length = 0.01, hide.ns = FALSE) +
stat_pvalue_manual(pwc2, label = "p.adj.signif", tip.length = 0.01, hide.ns = FALSE, y.position = c(3.0,3.2,2.8), limits = c(0,3.2),breaks = seq(0,3.2,1)) +
scale_y_continuous(name ="ug PFOS / mL", expand = expansion(mult = c(0.01, 0.1)))
# View the final plot
p.stat
suppressMessages(ggsave(filename = paste0("plots/animal_data/pfos/excreted_urine_",OUTCOME,".png"), plot = p.stat, device = "png", units = "mm", dpi = 300, height = 100, width = 150))
suppressMessages(ggsave(filename = paste0("plots/animal_data/pfos/excreted_urine_",OUTCOME,".pdf"), plot = p.stat, device = "pdf", units = "mm", dpi = 300, height = 100, width = 150))
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
# Load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Set parameters
PREDICTOR <- c("feed","day")
OUTCOME <- "conc"
SUBJECT <- "rat_name"
#rat_name, feed, treatment, feedtreat, dissection, bw_8, bw_21, bloodvol_8, bloodvol_16, bloodvol_21, pfos_total_mg, pfos_serum8_ugml, pfos_serum8_mg, pfos_serum8_pct, pfos_serum16_ugml, pfos_serum16_mg, pfos_serum16_pct, pfos_serum21_ugml, pfos_serum21_mg, pfos_serum21_pct
# Create data frame for data representation
dat.clean <- dat %>% select(rat_name, feed, treatment, feedtreat, dissection, bw_8, bw_12, bw_16, bw_21, pfos_total_mg, pfos_feces8_ugg, pfos_feces12_ugg, pfos_feces16_ugg, pfos_feces21_ugg) %>%
pivot_longer(., cols = c(pfos_feces8_ugg, pfos_feces12_ugg, pfos_feces16_ugg, pfos_feces21_ugg), names_to = "pfos_day", values_to = "conc")
# Create column for day of sampling
dat.clean <- dat.clean %>%
mutate("day" = case_when(pfos_day == "pfos_feces8_ugg" ~ "d08",
pfos_day == "pfos_feces12_ugg" ~ "d12",
pfos_day == "pfos_feces16_ugg" ~ "d16",
pfos_day == "pfos_feces21_ugg" ~ "d21"))
# Order dataframe for analysis
dat.clean <- dat.clean[order(dat.clean$day),]
# Remove rows with NA
dat.clean <- subset(dat.clean, !is.na(conc))
# Subset to only PFOS groups
dat.clean <- subset(dat.clean, dat.clean$treatment == "PFOS")
dat.clean
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = "jco")
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
PREDICTOR2 <- "day"
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR2, sep = " ~ "))
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
# Set variables for inner and outer analyses
INNER.VAR <- "feed"
OUTER.VAR <- "day"
# Statistics costumed for facet plotting
## Pairwise comparison for inner variable
stat.in <- dat.clean %>%
group_by(day) %>%
t_test(conc ~ feed,
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
## Pairwise comparison for outer variable
stat.out <- dat.clean %>%
welch_anova_test(conc ~ day) %>%
# dunn_test(conc ~ day, p.adjust.method = "fdr") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
pwc2 <- dat.clean %>%
# kruskal_test(conc ~ day) %>%
games_howell_test(conc ~ day) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc2
## Calculate positions statistics on plot
stat.in <- stat.in %>% add_xy_position(x = "day", dodge = 0.8)
pwc2 <- pwc2 %>% add_xy_position(x = "day")
pwc2$y.position <- max(stat.in$y.position)*1.1
# Calculate slope and intercept for each group
reg_lines <- dat.clean %>%
group_by(feed) %>%
summarize(slope = coef(lm(conc ~ day))[2],
intercept = coef(lm(conc ~ day))[1])
# Create ggboxplot with regression lines for feed types and slope values as text
p <- ggboxplot(dat.clean, x = "day", y = "conc",
fill = "feed",
color = "feed",
add = "jitter",
add.params = list(size = 1)) +
theme_pubr(legend = "top") +
scale_fill_manual(values = params$COLFEED, labels = c("No fibre","Fibre"), name = "Feed") +
scale_color_manual(breaks = dat.clean$feed, values = c("A" = "#000040","B" = "#004000")) +
scale_x_discrete(name = "Day", labels = c("Day 8","Day 12","Day 16","Day 21")) +
guides(color = FALSE) +
theme(axis.title.x=element_blank()) +
geom_smooth(aes(group = feed, color = feed), method = "lm", se = FALSE, size = 0.5, fullrange = TRUE, linetype = "dashed") +
annotate("text", x = 3, y = 4, label = paste("No fibre slope: ",round(reg_lines$slope[1],2)," µg/g/day")) +
annotate("text", x = 3, y = 3.5, label = paste("Fibre slope: ",round(reg_lines$slope[2],2)," µg/g/day"))
# Add statistics
p.stat <- p +
stat_pvalue_manual(stat.in, label = "p.signif", tip.length = 0.01, hide.ns = FALSE) +
stat_pvalue_manual(pwc2, label = "p.adj.signif", tip.length = 0.01, hide.ns = FALSE, y.position = c(5.4,5.7,6,4.8,5.1,4.5))+#, limits = c(30,80),breaks = seq(30,80,10)) +
scale_y_continuous(name ="ug PFOS / g", expand = expansion(mult = c(0.01, 0.1)))
# View the final plot
p.stat
suppressMessages(ggsave(filename = paste0("plots/animal_data/pfos/excreted_feces_",OUTCOME,".png"), plot = p.stat, device = "png", units = "mm", dpi = 300, height = 100, width = 150))
suppressMessages(ggsave(filename = paste0("plots/animal_data/pfos/excreted_feces_",OUTCOME,".pdf"), plot = p.stat, device = "pdf", units = "mm", dpi = 300, height = 100, width = 150))
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
if (!requireNamespace("remotes")) install.packages("remotes")
if (!requireNamespace("BiocManager")) install.packages("BiocManager")
remotes::install_github("MSMortensen/GMHmicrobiome")
if (!requireNamespace("remotes")) install.packages("remotes")
if (!requireNamespace("BiocManager")) install.packages("BiocManager")
remotes::install_github("MSMortensen/GMHmicrobiome")
# Load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
usethis::use_git_config(user.name = "YourName", user.email = "your@mail.com")
usethis::use_git_config(user.name = "clykkebo", user.email = "clauslykkebo@gmail.com")
credentials::set_github_pat("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")
library(gitcreds)
install.packages(c("ape", "cli", "dplyr", "markdown", "rlang", "tibble", "vctrs", "xfun"))
library(installr, lib.loc = "C:/Program Files/R/R-4.2.2/library")
updateR()
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(decontam)
library(pals)
library(ggpubr)
library(vegan)
library(phangorn)
library(kableExtra)
library(plotly)
library(rstatix)
library(forcats)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggbreak)
library(cowplot)
# Create used folders if missing
if (!file.exists("R_objects")) dir.create(file.path(getwd(), "R_objects"))
if (!file.exists("plots")) dir.create(file.path(getwd(), "plots"))
if (!file.exists("plots/animal_data")) dir.create(file.path(getwd(), "plots/animal_data"))
if (!file.exists("scripts")) dir.create(file.path(getwd(), "scripts"))
# Save params
saveRDS(params, file = "R_objects/animal_params.RDS")
# Load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- dat %>% select(rat_name, feed, cage, treatment, feedtreat, dissection, acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic) #%>%
# Filter data
filt <- preDA(data = dat.clean, min.reads = 20, min.samples = 4)
library(DAtest)
# Filter data
filt <- preDA(data = dat.clean, min.reads = 20, min.samples = 4)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(decontam)
library(pals)
library(ggpubr)
library(rstatix)
library(vegan)
library(reshape2)
library(DAtest)
library(ape)
library(kableExtra)
library(plotly)
library(magick)
library(forcats)
# Create used folders if missing
if (!file.exists("R_objects")) dir.create(file.path(getwd(), "R_objects"))
if (!file.exists("plots")) dir.create(file.path(getwd(), "plots"))
if (!file.exists("plots/cabu")) dir.create(file.path(getwd(), "plots/cabu"))
if (!file.exists("plots/dabu")) dir.create(file.path(getwd(), "plots/dabu"))
if (!file.exists("tables")) dir.create(file.path(getwd(), "tables"))
if (!file.exists("scripts")) dir.create(file.path(getwd(), "scripts"))
saveRDS(params, "R_objects/comp_params.RDS")
params <- readRDS("R_objects/comp_params.RDS")
LVL <- "Species"
MTRL <- "Feces"
DAY <- "d8"
VAN <- "all"
PDI <- "treatment"
SUBNAME <- "Feces_d8"
load(paste0("R_objects/Agglomerated_",SUBNAME,".RData"))
# Filter data
filt <- preDA(data = dat.clean, min.reads = 20, min.samples = 4)
dat.clean <- dat %>% select(rat_name, feed, cage, treatment, feedtreat, dissection, acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic) %>%
pivot_longer(., cols = c(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic), names_to = "scfa", values_to = "conc")
# Filter data
filt <- preDA(data = dat.clean, min.reads = 20, min.samples = 4)
dat.clean <- dat %>% select(rat_name, feed, cage, treatment, feedtreat, dissection, acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic) #%>%
# Create Matrix
dat.mat <- data.matrix(dat.clean)
View(dat.mat)
# Create Matrix
dat.mat <- data.matrix(dat.clean, rownames.force = "rat_name")
# Create Matrix
dat.mat <- data.matrix(dat.clean, rownames.force = "rat_name")
dat.mat
# Subset data with NA
dat.clean <- subset(dat.clean, !dat.clean$rat_name == "R04")
# Create Matrix
dat.mat <- data.matrix(dat.clean, rownames.force = "rat_name")
dat.mat
# Filter data
filt <- preDA(data = dat.mat, min.reads = 20, min.samples = 4)
dat.clean <- dat %>% select(# rat_name, feed, cage, treatment, feedtreat, dissection,
acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic) #%>%   pivot_longer(., cols = c(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic), names_to = "scfa", values_to = "conc")
# Subset data with NA
dat.clean <- subset(dat.clean, !dat.clean$rat_name == "R04")
# Create Matrix
dat.mat <- data.matrix(dat.clean)
View(dat.mat)
dat.clean <- dat %>% select(# rat_name, feed, cage, treatment, feedtreat, dissection,
rat_name, acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic) #%>%   pivot_longer(., cols = c(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic), names_to = "scfa", values_to = "conc")
# Subset data with NA
dat.clean <- subset(dat.clean, !dat.clean$rat_name == "R04")
# Create Matrix
dat.mat <- data.matrix(dat.clean)
# Filter data
filt <- preDA(data = dat.mat, min.reads = 20, min.samples = 4)
# Filter data
filt <- preDA(data = dat.mat, min.reads = 10, min.samples = 4)
# Filter data
filt <- preDA(data = dat.mat, min.reads = 30, min.samples = 4)
View(filt)
# Filter data
filt <- preDA(data = dat.mat, min.reads = 1, min.samples = 4)
dat.clean <- dat %>% select(rat_name, feed, cage, treatment, feedtreat, dissection,
acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic) #%>%   pivot_longer(., cols = c(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic), names_to = "scfa", values_to = "conc")
# Subset data with NA
dat.clean <- subset(dat.clean, !dat.clean$rat_name == "R04")
# Create Matrix
dat.mat <- data.matrix(dat.clean)
dat.mat
# Test best method
filt.test <- testDA(dat.mat, predictor = "feed", effectSize = 10)
# Test best method
filt.test <- testDA(dat.mat, predictor = feed, effectSize = 10)
# Test best method
filt.test <- testDA(dat.mat, predictor = feed, effectSize = 10, relative = FALSE)
load("R_objects/Phyloseq.Rdata")
phy@sam_data$acetic
head(dat.clean)
# Create SCFA table
dat.SCFA <- dat.clean %>% select(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic)
DA.tta(dat.SCFA, dat.clean$treatment)
DA.tta(t(dat.SCFA), dat.clean$treatment)
# Test best method
filt.test <- testDA(t(dat.SCFA), predictor = dat.clean$feed, effectSize = 10, relative = FALSE)
# Test best method
filt.test <- testDA(t(dat.SCFA), predictor = dat.clean$feed, effectSize = 10, relative = FALSE, k = c(1,1,2))
summary(filt.test)
plot(filt.test)
?vegdist()
# BRAY-CURTIS
dist.bray <- vegdist(t(dat.SCFA))
# PERMANOVA
plot_dendro(dist.bray)
# PERMANOVA
str(dist.bray)
str(dist.bray)
dist.bray
# BRAY-CURTIS
dist.bray <- vegdist(as.matrix(dat.SCFA))
dist.bray
head(dat.SCFA)
# Create SCFA table
row.names(dat.clean) <- dat.clean$rat_name
dat.SCFA <- dat.clean %>% select(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic)
# BRAY-CURTIS
dist.bray <- vegdist(as.matrix(dat.SCFA))
dist.bray
# PERMANOVA
adonis2(dist.bray ~ feed*treatment, data = dat.clean)
# PERMANOVA
adonis2(dist.bray ~ treatment, strata = feed, data = dat.clean)
# PERMANOVA
adonis2(dist.bray ~ treatment, strata = dat.clean$feed, data = dat.clean)
# PERMANOVA
adonis2(dist.bray ~ feed*treatment, data = dat.clean)
dist.bray
# PLOT
plot.pcoa <- ggplot(dist.bray, aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
theme_pubr(legend = "none")
# Load data
load("R_objects/animal_data.Rdata")
load("R_objects/Phyloseq.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- dat %>% select(rat_name, feed, cage, treatment, feedtreat, dissection,
acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic)
# Subset data with NA
dat.clean <- subset(dat.clean, !dat.clean$rat_name == "R04")
# Create SCFA table
row.names(dat.clean) <- dat.clean$rat_name
dat.SCFA <- dat.clean %>% select(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, m4_pentanoic, hexanoic, heptanoic)
# Test best method
filt.test <- testDA(t(dat.SCFA), predictor = dat.clean$feed, effectSize = 10, relative = FALSE, k = c(1,1,2))
# Evaluate the plot and summary table
sum.fil <- summary(filt.test)
p.fil <- plot(filt.test)
p.fil
# Run DAtest
DA.tta(t(dat.SCFA), dat.clean$treatment)
DA.per(t(dat.SCFA), dat.clean$treatment)
DA.wil(t(dat.SCFA), dat.clean$treatment)
DA.tta(t(dat.SCFA), dat.clean$feed)
DA.per(t(dat.SCFA), dat.clean$feed)
DA.wil(t(dat.SCFA), dat.clean$feed)
# Test best method
filt.test <- testDA(t(dat.SCFA), predictor = dat.clean$dissection, effectSize = 10, relative = FALSE, k = c(1,1,2))
# Evaluate the plot and summary table
sum.fil <- summary(filt.test)
p.fil <- plot(filt.test)
p.fil
# Run DAtest
DA.tta(t(dat.SCFA), dat.clean$dissection)
DA.per(t(dat.SCFA), dat.clean$dissection)
DA.wil(t(dat.SCFA), dat.clean$dissection)
# Run DAtest
DA.tta(t(dat.SCFA), dat.clean$feed)
DA.per(t(dat.SCFA), dat.clean$feed)
DA.wil(t(dat.SCFA), dat.clean$feed)
# Run DAtest
DA.tta(t(dat.SCFA), dat.clean$treatment)
DA.per(t(dat.SCFA), dat.clean$treatment)
DA.wil(t(dat.SCFA), dat.clean$treatment)
# BRAY-CURTIS
dist.bray <- vegdist(as.matrix(dat.SCFA), method = "bray")
# PERMANOVA
adonis2(dist.bray ~ feed*treatment, data = dat.clean)
# PLOT
plot.pcoa <- ggplot(data = dist.bray, aes_string(x = "Axis.1", y = "Axis.2", color = dat.clean$feed, group = dat.clean$feed)) +
geom_point() +
theme_pubr(legend = "none")
# PLOT
# create ordination
bray.pcoa <- ordinate(dat.clean, method = "PCoA",distance = dist.bray)
