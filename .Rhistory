phy.used <- phy.sub
rm(bray.sub.dist, bray.sub.nmds, bray.sub.pcoa, phy.sub)
} else if (METRIC == "jac"){
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",FEED,"_",METRIC,".Rdata"))
dist.used <- bray.sub.dist
nmds.used <- bray.sub.nmds
pcoa.used <- bray.sub.pcoa
phy.used <- phy.sub
rm(jac.sub.dist, jac.sub.nmds, jac.sub.pcoa, phy.sub)
} else if (METRIC == "ait"){
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",FEED,"_",METRIC,".Rdata"))
dist.used <- ait.sub.dist
nmds.used <- ait.sub.nmds
pcoa.used <- ait.sub.pcoa
phy.used <- phy.sub
rm(ait.sub.dist, ait.sub.nmds, ait.sub.pcoa, phy.sub)
}
}
# if (METRIC == "unif") {
#   load("R_objects/bdiv_unif.RData")
#   dist.used <- unif.dist
#   nmds.used <- unif.nmds
#   pcoa.used <- unif.pcoa
#   phy.used <- phy.rare
#   rm(unif.dist, unif.nmds, unif.pcoa, phy.rare)
# } else if (METRIC == "wunif") {
#   load("R_objects/bdiv_wunif.RData")
#   dist.used <- wuf.dist
#   nmds.used <- wuf.nmds
#   pcoa.used <- wuf.pcoa
#   phy.used <- phy.clean
#   rm(wuf.dist, wuf.nmds, wuf.pcoa,phy.clean)
# } else if (METRIC == "bray"){
#   load("R_objects/bdiv_bray.RData")
#   dist.used <- bray.dist
#   nmds.used <- bray.nmds
#   pcoa.used <- bray.pcoa
#   phy.used <- phy.ra
#   rm(bray.dist, bray.nmds, bray.pcoa, phy.ra)
# } else if (METRIC == "jac"){
#   load("R_objects/bdiv_jac.RData")
#   dist.used <- bray.dist
#   nmds.used <- bray.nmds
#   pcoa.used <- bray.pcoa
#   phy.used <- phy.rare
#   rm(jac.dist, jac.nmds, jac.pcoa, phy.rare)
# } else if (METRIC == "ait"){
#   load("R_objects/bdiv_ait.RData")
#   dist.used <- ait.dist
#   nmds.used <- ait.nmds
#   pcoa.used <- ait.pcoa
#   phy.used <- phy.clean
#   rm(ait.dist, ait.nmds, ait.pcoa, phy.clean)
#}
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy.used))
# If a variable consist of numbers, but represent distinct groups remember to make it into a factor
mdat[,VAR] <- as.factor(mdat[,VAR])
# Extract eigen values
eigen <- pcoa.used$values
eigen$Axis <- as.numeric(row.names(eigen))
# Create plots for both distance indeces
p.eigen <- ggplot(eigen[1:10,], aes(x = as.factor(Axis), y = 100*Relative_eig)) +
geom_col(aes(fill = as.factor(Axis))) +
geom_point(aes(x = Axis, y = 100*Cumul_eig)) +
geom_line(aes(x = Axis, y = 100*Cumul_eig)) +
ylab("Variance explained (%)") +
xlab("Axis") +
theme_pubr(legend = "none") + ggsci::scale_fill_jco()
p.eigen + ggtitle(paste("Variance per axis for", METRIC, sep = " "))
# Create plots of eigenvalues for PCoA plots
pcoa.tab <- plot_ordination(phy, pcoa.used,axes = 1:5,justDF = TRUE)
# Create plots of eigenvalues for PCoA plots
pcoa.tab <- plot_ordination(phy.sub, pcoa.used,axes = 1:5,justDF = TRUE)
# Create plots of eigenvalues for PCoA plots
pcoa.tab <- plot_ordination(phy.used, pcoa.used,axes = 1:5,justDF = TRUE)
nmds.tab <- plot_ordination(phy.used, nmds.used,axes = 1:5,justDF = TRUE)
# Reformat tables to create one common table
colnames(nmds.tab)[1:5] <- c("Axis.1","Axis.2","Axis.3","Axis.4","Axis.5")
nmds.tab$ordination <- "nmds"
pcoa.tab$ordination <- "pcoa"
ord.tab <- rbind(nmds.tab,pcoa.tab)
ord.tab[,VAR] <- as.factor(ord.tab[,VAR])
# Melt axis to be in one variable
axis.tab <- pivot_longer(data = ord.tab, cols = c("Axis.1","Axis.2","Axis.3","Axis.4","Axis.5"), names_to = "Axis", values_to = "position")
# Plot positions on axes
ggplot(axis.tab, aes_string(x = "ordination", y = "position", fill = VAR)) +
geom_boxplot() +
facet_grid(Axis~.) +
coord_flip() +
theme_pubr(legend = "bottom") + ggsci::scale_fill_jco()
# Create NMDS plot
plot.nmds <- ggplot(ord.tab[ord.tab$ordination == "nmds",], aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
labs(color=VAR) +
theme_pubr(legend = "bottom")+
stat_ellipse() + ggsci::scale_color_jco()
plot.nmds1 <- plot.nmds + theme_pubr(legend = "none")
plot.nmds2 <- ggExtra::ggMarginal(p = plot.nmds1, type = 'boxplot', size = 10, groupFill = TRUE )
# Create PCoA plot
plot.pcoa <- ggplot(ord.tab[ord.tab$ordination == "pcoa",], aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
theme_pubr(legend = "none") +
labs(color=VAR) +
stat_ellipse() + ggsci::scale_color_jco()
plot.pcoa2 <- ggExtra::ggMarginal(p = plot.pcoa, type = 'boxplot', size = 10, groupFill = TRUE)
# Extract legend
plot.legend <- get_legend(plot.nmds)
# Draw plot
p.done <- ggdraw() +
draw_plot(plot.nmds2, 0, 0.1, 0.5, 0.9) +
draw_plot(plot.pcoa2, 0.5, 0.1, 0.5, 0.9) +
draw_grob(plot.legend, 0, 0, 1, .1) +
draw_plot_label("NMDS") +
draw_plot_label("PCoA", x = 0.5) +
theme(plot.background = element_rect(fill="white", color = NA))
p.done
# Save plot
plotfile <- file.path("plots",paste0("bdiv_ordination_",VAR,".png"))
ggsave(filename = plotfile, plot = p.done, width = 14, height = 7,units = "in",dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
library(GMHmicrobiome)
library(ggpubr)
library(kableExtra)
library(phyloseq)
library(cowplot)
library(ggExtra)
library(vegan)
# save parameters
saveRDS(params, "R_objects/params_betadiv.RDS")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
# Create plots of eigenvalues for PCoA plots
pcoa.tab <- plot_ordination(phy.used, pcoa.used,axes = 1:5,justDF = TRUE)
params <- readRDS("R_objects/params_betadiv.RDS")
# Choose metric
METRIC <- "bray"
# Choose variable
VAR <- "feed_treat"
MTRL <- "Feces"
DAY <- "d08"
FEED <- "A"
# Load data
if (FEED == "All") {
if (METRIC == "unif") {
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",METRIC,".Rdata"))
dist.used <- unif.sub.dist
nmds.used <- unif.sub.nmds
pcoa.used <- unif.sub.pcoa
phy.used <- phy.sub
rm(unif.sub.dist, unif.sub.nmds, unif.sub.pcoa, phy.sub)
} else if (METRIC == "wuf") {
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",METRIC,".Rdata"))
dist.used <- wuf.sub.dist
nmds.used <- wuf.sub.nmds
pcoa.used <- wuf.sub.pcoa
phy.used <- phy.sub
rm(wuf.sub.dist, wuf.sub.nmds, wuf.sub.pcoa,phy.sub)
} else if (METRIC == "bray"){
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",METRIC,".Rdata"))
dist.used <- bray.sub.dist
nmds.used <- bray.sub.nmds
pcoa.used <- bray.sub.pcoa
phy.used <- phy.sub
rm(bray.sub.dist, bray.sub.nmds, bray.sub.pcoa, phy.sub)
} else if (METRIC == "jac"){
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",METRIC,".Rdata"))
dist.used <- bray.sub.dist
nmds.used <- bray.sub.nmds
pcoa.used <- bray.sub.pcoa
phy.used <- phy.sub
rm(jac.sub.dist, jac.sub.nmds, jac.sub.pcoa, phy.sub)
} else if (METRIC == "ait"){
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",METRIC,".Rdata"))
dist.used <- ait.sub.dist
nmds.used <- ait.sub.nmds
pcoa.used <- ait.sub.pcoa
phy.used <- phy.sub
rm(ait.sub.dist, ait.sub.nmds, ait.sub.pcoa, phy.sub)
}
} else {
if (METRIC == "unif") {
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",FEED,"_",METRIC,".Rdata"))
dist.used <- unif.sub.dist
nmds.used <- unif.sub.nmds
pcoa.used <- unif.sub.pcoa
phy.used <- phy.sub
rm(unif.sub.dist, unif.sub.nmds, unif.sub.pcoa, phy.sub)
} else if (METRIC == "wuf") {
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",FEED,"_",METRIC,".Rdata"))
dist.used <- wuf.sub.dist
nmds.used <- wuf.sub.nmds
pcoa.used <- wuf.sub.pcoa
phy.used <- phy.sub
rm(wuf.sub.dist, wuf.sub.nmds, wuf.sub.pcoa,phy.sub)
} else if (METRIC == "bray"){
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",FEED,"_",METRIC,".Rdata"))
dist.used <- bray.sub.dist
nmds.used <- bray.sub.nmds
pcoa.used <- bray.sub.pcoa
phy.used <- phy.sub
rm(bray.sub.dist, bray.sub.nmds, bray.sub.pcoa, phy.sub)
} else if (METRIC == "jac"){
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",FEED,"_",METRIC,".Rdata"))
dist.used <- bray.sub.dist
nmds.used <- bray.sub.nmds
pcoa.used <- bray.sub.pcoa
phy.used <- phy.sub
rm(jac.sub.dist, jac.sub.nmds, jac.sub.pcoa, phy.sub)
} else if (METRIC == "ait"){
load(paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",FEED,"_",METRIC,".Rdata"))
dist.used <- ait.sub.dist
nmds.used <- ait.sub.nmds
pcoa.used <- ait.sub.pcoa
phy.used <- phy.sub
rm(ait.sub.dist, ait.sub.nmds, ait.sub.pcoa, phy.sub)
}
}
# if (METRIC == "unif") {
#   load("R_objects/bdiv_unif.RData")
#   dist.used <- unif.dist
#   nmds.used <- unif.nmds
#   pcoa.used <- unif.pcoa
#   phy.used <- phy.rare
#   rm(unif.dist, unif.nmds, unif.pcoa, phy.rare)
# } else if (METRIC == "wunif") {
#   load("R_objects/bdiv_wunif.RData")
#   dist.used <- wuf.dist
#   nmds.used <- wuf.nmds
#   pcoa.used <- wuf.pcoa
#   phy.used <- phy.clean
#   rm(wuf.dist, wuf.nmds, wuf.pcoa,phy.clean)
# } else if (METRIC == "bray"){
#   load("R_objects/bdiv_bray.RData")
#   dist.used <- bray.dist
#   nmds.used <- bray.nmds
#   pcoa.used <- bray.pcoa
#   phy.used <- phy.ra
#   rm(bray.dist, bray.nmds, bray.pcoa, phy.ra)
# } else if (METRIC == "jac"){
#   load("R_objects/bdiv_jac.RData")
#   dist.used <- bray.dist
#   nmds.used <- bray.nmds
#   pcoa.used <- bray.pcoa
#   phy.used <- phy.rare
#   rm(jac.dist, jac.nmds, jac.pcoa, phy.rare)
# } else if (METRIC == "ait"){
#   load("R_objects/bdiv_ait.RData")
#   dist.used <- ait.dist
#   nmds.used <- ait.nmds
#   pcoa.used <- ait.pcoa
#   phy.used <- phy.clean
#   rm(ait.dist, ait.nmds, ait.pcoa, phy.clean)
#}
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy.used))
# If a variable consist of numbers, but represent distinct groups remember to make it into a factor
mdat[,VAR] <- as.factor(mdat[,VAR])
# Extract eigen values
eigen <- pcoa.used$values
eigen$Axis <- as.numeric(row.names(eigen))
# Create plots for both distance indeces
p.eigen <- ggplot(eigen[1:10,], aes(x = as.factor(Axis), y = 100*Relative_eig)) +
geom_col(aes(fill = as.factor(Axis))) +
geom_point(aes(x = Axis, y = 100*Cumul_eig)) +
geom_line(aes(x = Axis, y = 100*Cumul_eig)) +
ylab("Variance explained (%)") +
xlab("Axis") +
theme_pubr(legend = "none") + ggsci::scale_fill_jco()
p.eigen + ggtitle(paste("Variance per axis for", METRIC, sep = " "))
# Create plots of eigenvalues for PCoA plots
pcoa.tab <- plot_ordination(phy.used, pcoa.used,axes = 1:5,justDF = TRUE)
nmds.tab <- plot_ordination(phy.used, nmds.used,axes = 1:5,justDF = TRUE)
# Reformat tables to create one common table
colnames(nmds.tab)[1:5] <- c("Axis.1","Axis.2","Axis.3","Axis.4","Axis.5")
nmds.tab$ordination <- "nmds"
pcoa.tab$ordination <- "pcoa"
ord.tab <- rbind(nmds.tab,pcoa.tab)
ord.tab[,VAR] <- as.factor(ord.tab[,VAR])
# Melt axis to be in one variable
axis.tab <- pivot_longer(data = ord.tab, cols = c("Axis.1","Axis.2","Axis.3","Axis.4","Axis.5"), names_to = "Axis", values_to = "position")
# Plot positions on axes
ggplot(axis.tab, aes_string(x = "ordination", y = "position", fill = VAR)) +
geom_boxplot() +
facet_grid(Axis~.) +
coord_flip() +
theme_pubr(legend = "bottom") + scale_fill_manual(values = params$COL)#ggsci::scale_fill_jco()
# Create NMDS plot
plot.nmds <- ggplot(ord.tab[ord.tab$ordination == "nmds",], aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
labs(color=VAR) +
theme_pubr(legend = "bottom")+
stat_ellipse() + ggsci::scale_color_jco()
plot.nmds1 <- plot.nmds + theme_pubr(legend = "none")
plot.nmds2 <- ggExtra::ggMarginal(p = plot.nmds1, type = 'boxplot', size = 10, groupFill = TRUE )
# Create PCoA plot
plot.pcoa <- ggplot(ord.tab[ord.tab$ordination == "pcoa",], aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
theme_pubr(legend = "none") +
labs(color=VAR) +
stat_ellipse() + ggsci::scale_color_jco()
plot.pcoa2 <- ggExtra::ggMarginal(p = plot.pcoa, type = 'boxplot', size = 10, groupFill = TRUE)
# Extract legend
plot.legend <- get_legend(plot.nmds)
# Draw plot
p.done <- ggdraw() +
draw_plot(plot.nmds2, 0, 0.1, 0.5, 0.9) +
draw_plot(plot.pcoa2, 0.5, 0.1, 0.5, 0.9) +
draw_grob(plot.legend, 0, 0, 1, .1) +
draw_plot_label("NMDS") +
draw_plot_label("PCoA", x = 0.5) +
theme(plot.background = element_rect(fill="white", color = NA))
p.done
# Save plot
plotfile <- file.path("plots",paste0("bdiv_ordination_",VAR,".png"))
ggsave(filename = plotfile, plot = p.done, width = 14, height = 7,units = "in",dpi = 300)
# Create NMDS plot
plot.nmds <- ggplot(ord.tab[ord.tab$ordination == "nmds",], aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
labs(color=VAR) +
theme_pubr(legend = "bottom")+
stat_ellipse() + scale_fill_manual(values = params$COL)
plot.nmds1 <- plot.nmds + theme_pubr(legend = "none")
plot.nmds2 <- ggExtra::ggMarginal(p = plot.nmds1, type = 'boxplot', size = 10, groupFill = TRUE )
# Create PCoA plot
plot.pcoa <- ggplot(ord.tab[ord.tab$ordination == "pcoa",], aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
theme_pubr(legend = "none") +
labs(color=VAR) +
stat_ellipse() + scale_fill_manual(values = params$COL)
plot.pcoa2 <- ggExtra::ggMarginal(p = plot.pcoa, type = 'boxplot', size = 10, groupFill = TRUE)
# Extract legend
plot.legend <- get_legend(plot.nmds)
# Draw plot
p.done <- ggdraw() +
draw_plot(plot.nmds2, 0, 0.1, 0.5, 0.9) +
draw_plot(plot.pcoa2, 0.5, 0.1, 0.5, 0.9) +
draw_grob(plot.legend, 0, 0, 1, .1) +
draw_plot_label("NMDS") +
draw_plot_label("PCoA", x = 0.5) +
theme(plot.background = element_rect(fill="white", color = NA))
p.done
# Save plot
plotfile <- file.path("plots",paste0("bdiv_ordination_",VAR,".png"))
ggsave(filename = plotfile, plot = p.done, width = 14, height = 7,units = "in",dpi = 300)
# Create NMDS plot
plot.nmds <- ggplot(ord.tab[ord.tab$ordination == "nmds",], aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
labs(color=VAR) +
theme_pubr(legend = "bottom")+
stat_ellipse() + scale_color_manual(values = params$COL)
plot.nmds1 <- plot.nmds + theme_pubr(legend = "none")
plot.nmds2 <- ggExtra::ggMarginal(p = plot.nmds1, type = 'boxplot', size = 10, groupFill = TRUE )
# Create PCoA plot
plot.pcoa <- ggplot(ord.tab[ord.tab$ordination == "pcoa",], aes_string(x = "Axis.1", y = "Axis.2", color = VAR, group = VAR)) +
geom_point() +
theme_pubr(legend = "none") +
labs(color=VAR) +
stat_ellipse() + scale_color_manual(values = params$COL)
plot.pcoa2 <- ggExtra::ggMarginal(p = plot.pcoa, type = 'boxplot', size = 10, groupFill = TRUE)
# Extract legend
plot.legend <- get_legend(plot.nmds)
# Draw plot
p.done <- ggdraw() +
draw_plot(plot.nmds2, 0, 0.1, 0.5, 0.9) +
draw_plot(plot.pcoa2, 0.5, 0.1, 0.5, 0.9) +
draw_grob(plot.legend, 0, 0, 1, .1) +
draw_plot_label("NMDS") +
draw_plot_label("PCoA", x = 0.5) +
theme(plot.background = element_rect(fill="white", color = NA))
p.done
# Save plot
plotfile <- file.path("plots",paste0("bdiv_ordination_",VAR,".png"))
ggsave(filename = plotfile, plot = p.done, width = 14, height = 7,units = "in",dpi = 300)
# Calculate betadispertion
bdisp <- betadisper(dist.used, mdat[,VAR])
# Run statical test
anova(bdisp)
# Run posthoc test if significant and more than two groups
TukeyHSD(bdisp)
plot(TukeyHSD(bdisp))
# Plot dispertion
boxplot(bdisp)
# Perform test
adonis2(dist.used ~ feed*treatment, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
# Perform test
adonis2(dist.used ~ treatment, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
# Perform test
if (FEED == "All") {
adonis2(dist.used ~ treatment*feed, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
} else {
adonis2(dist.used ~ treatment, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
}
# Perform test
if (FEED == "All") {
adonis2(dist.used ~ treatment*feed, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
} else {
adonis2(dist.used ~ treatment, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
}
# Perform test
if (FEED == "All") {
adonis2(dist.used ~ treatment*feed, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
} else {
adonis2(dist.used ~ treatment, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
}
# Perform test
if (FEED == "All") {
adonis2(dist.used ~ treatment*feed, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
} else {
adonis2(dist.used ~ treatment, data = mdat, strata = mdat$day, permutations = 999, na.action = na.omit)
}
# Fit data
fit.nmds <- envfit(nmds.used ~ treatment+feed,mdat, na.rm=TRUE, perm = 999)
fit.pcoa <- envfit(nmds.used ~ treatment+feed,mdat, na.rm=TRUE, perm = 999)
# Extract nmds arrows
arrow.nmds <- data.frame(fit.nmds$vectors$arrows)
colnames(arrow.nmds) <- c("xend","yend")
# Save plot
plotfile <- file.path("plots",paste0("/bdiv/",MTRL,"_",DAY,"/bdiv_ordination_",VAR,".png"))
# Save plot
plotfile <- file.path("plots",paste0("bdiv/",MTRL,"_",DAY,"/bdiv_ordination_",VAR,".png"))
params <- readRDS("R_objects/params_betadiv.RDS")
# Choose metric
METRIC <- "bray"
# Choose variable
VAR <- "feed_treat"
MTRL <- "Feces"
DAY <- "d08"
FEED <- "A"
# Load data
if (FEED == "All") {
BFILE <- paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",METRIC,".Rdata")
} else {
BFILE <- paste0("R_objects/bdiv_sub_",MTRL,"_",DAY,"_",FEED,"_",METRIC,".Rdata")
}
if (METRIC == "unif") {
load(BFILE)
dist.used <- unif.sub.dist
nmds.used <- unif.sub.nmds
pcoa.used <- unif.sub.pcoa
phy.used <- phy.sub
rm(unif.sub.dist, unif.sub.nmds, unif.sub.pcoa, phy.sub)
} else if (METRIC == "wuf") {
load(BFILE)
dist.used <- wuf.sub.dist
nmds.used <- wuf.sub.nmds
pcoa.used <- wuf.sub.pcoa
phy.used <- phy.sub
rm(wuf.sub.dist, wuf.sub.nmds, wuf.sub.pcoa,phy.sub)
} else if (METRIC == "bray"){
load(BFILE)
dist.used <- bray.sub.dist
nmds.used <- bray.sub.nmds
pcoa.used <- bray.sub.pcoa
phy.used <- phy.sub
rm(bray.sub.dist, bray.sub.nmds, bray.sub.pcoa, phy.sub)
} else if (METRIC == "jac"){
load(BFILE)
dist.used <- bray.sub.dist
nmds.used <- bray.sub.nmds
pcoa.used <- bray.sub.pcoa
phy.used <- phy.sub
rm(jac.sub.dist, jac.sub.nmds, jac.sub.pcoa, phy.sub)
} else if (METRIC == "ait"){
load(BFILE)
dist.used <- ait.sub.dist
nmds.used <- ait.sub.nmds
pcoa.used <- ait.sub.pcoa
phy.used <- phy.sub
rm(ait.sub.dist, ait.sub.nmds, ait.sub.pcoa, phy.sub)
}
# if (METRIC == "unif") {
#   load("R_objects/bdiv_unif.RData")
#   dist.used <- unif.dist
#   nmds.used <- unif.nmds
#   pcoa.used <- unif.pcoa
#   phy.used <- phy.rare
#   rm(unif.dist, unif.nmds, unif.pcoa, phy.rare)
# } else if (METRIC == "wunif") {
#   load("R_objects/bdiv_wunif.RData")
#   dist.used <- wuf.dist
#   nmds.used <- wuf.nmds
#   pcoa.used <- wuf.pcoa
#   phy.used <- phy.clean
#   rm(wuf.dist, wuf.nmds, wuf.pcoa,phy.clean)
# } else if (METRIC == "bray"){
#   load("R_objects/bdiv_bray.RData")
#   dist.used <- bray.dist
#   nmds.used <- bray.nmds
#   pcoa.used <- bray.pcoa
#   phy.used <- phy.ra
#   rm(bray.dist, bray.nmds, bray.pcoa, phy.ra)
# } else if (METRIC == "jac"){
#   load("R_objects/bdiv_jac.RData")
#   dist.used <- bray.dist
#   nmds.used <- bray.nmds
#   pcoa.used <- bray.pcoa
#   phy.used <- phy.rare
#   rm(jac.dist, jac.nmds, jac.pcoa, phy.rare)
# } else if (METRIC == "ait"){
#   load("R_objects/bdiv_ait.RData")
#   dist.used <- ait.dist
#   nmds.used <- ait.nmds
#   pcoa.used <- ait.pcoa
#   phy.used <- phy.clean
#   rm(ait.dist, ait.nmds, ait.pcoa, phy.clean)
#}
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy.used))
# If a variable consist of numbers, but represent distinct groups remember to make it into a factor
mdat[,VAR] <- as.factor(mdat[,VAR])
