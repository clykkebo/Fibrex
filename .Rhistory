adat_wide$FaithPD_day_12 <- adat_wide$FaithPD_day_12/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_16 <- adat_wide$FaithPD_day_16/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_20 <- adat_wide$FaithPD_day_20/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_21 <- adat_wide$FaithPD_day_21/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_8 <- adat_wide$FaithPD_day_8/adat_wide$FaithPD_day_0*100
adat_wide$Shannon_day_12 <- adat_wide$Shannon_day_12/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_16 <- adat_wide$Shannon_day_16/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_20 <- adat_wide$Shannon_day_20/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_21 <- adat_wide$Shannon_day_21/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_8 <- adat_wide$Shannon_day_8/adat_wide$Shannon_day_0*100
adat_long <- adat_wide %>% pivot_longer(names_to = "TMP", values_to = "Adiv_change",cols = contains("_day_"))
for (i in seq(nrow(adat_long))){
adat_long$Index[i] <-unlist(str_split(adat_long$TMP[i],"_"))[1]
adat_long$Day[i] <-unlist(str_split(adat_long$TMP[i],"_"))[3]
}
head(adat_long)
adat_long$Day <- as.numeric(adat_long$Day)
plot_feed_treat <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(Day, Adiv_change, group = rat, color = treatment)) + geom_point() + geom_line() + facet_grid(feed~Index)
suppressMessages(ggsave(filename = plot_feed_treat, plot = plot_feed_treat, device = "png"))
params <- readRDS("R_objects/Adiv_params.RDS")
# Load data
load("R_objects/AlphaDiversity.RData")
# subset
adat <- adat[adat$material == "Feces",]
adat_wide <- adat %>% select(feed, treatment, rat, day, Shannon, Observed, FaithPD) %>% pivot_wider(names_from = "day", names_prefix = "day_", values_from = c("Observed","Shannon","FaithPD"))
#
head(adat_wide[,grepl("Observed",colnames(adat_wide))])
adat_wide$Observed_day_12 <- adat_wide$Observed_day_12/adat_wide$Observed_day_0*100
adat_wide$Observed_day_16 <- adat_wide$Observed_day_16/adat_wide$Observed_day_0*100
adat_wide$Observed_day_20 <- adat_wide$Observed_day_20/adat_wide$Observed_day_0*100
adat_wide$Observed_day_21 <- adat_wide$Observed_day_21/adat_wide$Observed_day_0*100
adat_wide$Observed_day_8 <- adat_wide$Observed_day_8/adat_wide$Observed_day_0*100
adat_wide$FaithPD_day_12 <- adat_wide$FaithPD_day_12/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_16 <- adat_wide$FaithPD_day_16/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_20 <- adat_wide$FaithPD_day_20/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_21 <- adat_wide$FaithPD_day_21/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_8 <- adat_wide$FaithPD_day_8/adat_wide$FaithPD_day_0*100
adat_wide$Shannon_day_12 <- adat_wide$Shannon_day_12/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_16 <- adat_wide$Shannon_day_16/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_20 <- adat_wide$Shannon_day_20/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_21 <- adat_wide$Shannon_day_21/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_8 <- adat_wide$Shannon_day_8/adat_wide$Shannon_day_0*100
adat_long <- adat_wide %>% pivot_longer(names_to = "TMP", values_to = "Adiv_change",cols = contains("_day_"))
for (i in seq(nrow(adat_long))){
adat_long$Index[i] <-unlist(str_split(adat_long$TMP[i],"_"))[1]
adat_long$Day[i] <-unlist(str_split(adat_long$TMP[i],"_"))[3]
}
head(adat_long)
adat_long$Day <- as.numeric(adat_long$Day)
plot_feed_treat <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(Day, Adiv_change, group = rat, color = treatment)) + geom_point() + geom_line() + facet_grid(feed~Index)
suppressMessages(ggsave(filename = "plot_feed_treat", plot = plot_feed_treat, device = "png"))
plot_treat_feed <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(Day, Adiv_change, group = rat, color = feed)) + geom_point() + geom_line() + facet_grid(treatment~Index)
suppressMessages(ggsave(filename = "plot_treat_feed", plot = plot_treat_feed, device = "png"))
adat_long$feed_treat <- with(adat_long, paste(feed, treatment, sep = "_"))
plot_treat_feed_day <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(feed, Adiv_change, color = treatment)) + geom_boxplot() + facet_grid(Index~Day)
suppressMessages(ggsave(filename = "plot_treat_feed_day", plot = plot_treat_feed_day, device = "png"))
head(adat_long)
adat_long$Day <- as.numeric(adat_long$Day)
plot_feed_treat <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(Day, Adiv_change, group = rat, color = treatment)) + geom_point() + geom_line() + facet_grid(feed~Index)
plot_treat_feed
params <- readRDS("R_objects/Adiv_params.RDS")
# Load data
load("R_objects/AlphaDiversity.RData")
# subset
adat <- adat[adat$material == "Feces",]
adat_wide <- adat %>% select(feed, treatment, rat, day, Shannon, Observed, FaithPD) %>% pivot_wider(names_from = "day", names_prefix = "day_", values_from = c("Observed","Shannon","FaithPD"))
#
head(adat_wide[,grepl("Observed",colnames(adat_wide))])
adat_wide$Observed_day_12 <- adat_wide$Observed_day_12/adat_wide$Observed_day_0*100
adat_wide$Observed_day_16 <- adat_wide$Observed_day_16/adat_wide$Observed_day_0*100
adat_wide$Observed_day_20 <- adat_wide$Observed_day_20/adat_wide$Observed_day_0*100
adat_wide$Observed_day_21 <- adat_wide$Observed_day_21/adat_wide$Observed_day_0*100
adat_wide$Observed_day_8 <- adat_wide$Observed_day_8/adat_wide$Observed_day_0*100
adat_wide$FaithPD_day_12 <- adat_wide$FaithPD_day_12/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_16 <- adat_wide$FaithPD_day_16/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_20 <- adat_wide$FaithPD_day_20/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_21 <- adat_wide$FaithPD_day_21/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_8 <- adat_wide$FaithPD_day_8/adat_wide$FaithPD_day_0*100
adat_wide$Shannon_day_12 <- adat_wide$Shannon_day_12/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_16 <- adat_wide$Shannon_day_16/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_20 <- adat_wide$Shannon_day_20/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_21 <- adat_wide$Shannon_day_21/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_8 <- adat_wide$Shannon_day_8/adat_wide$Shannon_day_0*100
adat_long <- adat_wide %>% pivot_longer(names_to = "TMP", values_to = "Adiv_change",cols = contains("_day_"))
for (i in seq(nrow(adat_long))){
adat_long$Index[i] <-unlist(str_split(adat_long$TMP[i],"_"))[1]
adat_long$Day[i] <-unlist(str_split(adat_long$TMP[i],"_"))[3]
}
head(adat_long)
adat_long$Day <- as.numeric(adat_long$Day)
plot_feed_treat <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(Day, Adiv_change, group = rat, color = treatment)) + geom_point() + geom_line() + facet_grid(feed~Index)
suppressMessages(ggsave(filename = "plots/plot_feed_treat", plot = plot_feed_treat, device = "png"))
plot_treat_feed <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(Day, Adiv_change, group = rat, color = feed)) + geom_point() + geom_line() + facet_grid(treatment~Index)
suppressMessages(ggsave(filename = "plots/plot_treat_feed", plot = plot_treat_feed, device = "png"))
adat_long$feed_treat <- with(adat_long, paste(feed, treatment, sep = "_"))
plot_treat_feed_day <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(feed, Adiv_change, color = treatment)) + geom_boxplot() + facet_grid(Index~Day)
suppressMessages(ggsave(filename = "plots/plot_treat_feed_day", plot = plot_treat_feed_day, device = "png"))
params <- readRDS("R_objects/Adiv_params.RDS")
# Load data
load("R_objects/AlphaDiversity.RData")
# subset
adat <- adat[adat$material == "Feces",]
adat_wide <- adat %>% select(feed, treatment, rat, day, Shannon, Observed, FaithPD) %>% pivot_wider(names_from = "day", names_prefix = "day_", values_from = c("Observed","Shannon","FaithPD"))
#
head(adat_wide[,grepl("Observed",colnames(adat_wide))])
adat_wide$Observed_day_12 <- adat_wide$Observed_day_12/adat_wide$Observed_day_0*100
adat_wide$Observed_day_16 <- adat_wide$Observed_day_16/adat_wide$Observed_day_0*100
adat_wide$Observed_day_20 <- adat_wide$Observed_day_20/adat_wide$Observed_day_0*100
adat_wide$Observed_day_21 <- adat_wide$Observed_day_21/adat_wide$Observed_day_0*100
adat_wide$Observed_day_8 <- adat_wide$Observed_day_8/adat_wide$Observed_day_0*100
adat_wide$FaithPD_day_12 <- adat_wide$FaithPD_day_12/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_16 <- adat_wide$FaithPD_day_16/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_20 <- adat_wide$FaithPD_day_20/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_21 <- adat_wide$FaithPD_day_21/adat_wide$FaithPD_day_0*100
adat_wide$FaithPD_day_8 <- adat_wide$FaithPD_day_8/adat_wide$FaithPD_day_0*100
adat_wide$Shannon_day_12 <- adat_wide$Shannon_day_12/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_16 <- adat_wide$Shannon_day_16/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_20 <- adat_wide$Shannon_day_20/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_21 <- adat_wide$Shannon_day_21/adat_wide$Shannon_day_0*100
adat_wide$Shannon_day_8 <- adat_wide$Shannon_day_8/adat_wide$Shannon_day_0*100
adat_long <- adat_wide %>% pivot_longer(names_to = "TMP", values_to = "Adiv_change",cols = contains("_day_"))
for (i in seq(nrow(adat_long))){
adat_long$Index[i] <-unlist(str_split(adat_long$TMP[i],"_"))[1]
adat_long$Day[i] <-unlist(str_split(adat_long$TMP[i],"_"))[3]
}
head(adat_long)
adat_long$Day <- as.numeric(adat_long$Day)
plot_feed_treat <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(Day, Adiv_change, group = rat, color = treatment)) + geom_point() + geom_line() + facet_grid(feed~Index)
suppressMessages(ggsave(filename = "plots/plot_feed_treat.png", plot = plot_feed_treat, device = "png"))
plot_treat_feed <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(Day, Adiv_change, group = rat, color = feed)) + geom_point() + geom_line() + facet_grid(treatment~Index)
suppressMessages(ggsave(filename = "plots/plot_treat_feed.png", plot = plot_treat_feed, device = "png"))
adat_long$feed_treat <- with(adat_long, paste(feed, treatment, sep = "_"))
plot_treat_feed_day <- ggplot(adat_long[!is.na(adat_long$Adiv_change) & adat_long$Day != 0,], aes(feed, Adiv_change, color = treatment)) + geom_boxplot() + facet_grid(Index~Day)
suppressMessages(ggsave(filename = "plots/plot_treat_feed_day.png", plot = plot_treat_feed_day, device = "png"))
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(ggpubr)
library(rstatix)
library(vegan)
library(ape)
library(kableExtra)
# Create used folders if missing
if (!file.exists("R_objects")) dir.create(file.path(getwd(), "R_objects"))
if (!file.exists("plots")) dir.create(file.path(getwd(), "plots"))
if (!file.exists("tables")) dir.create(file.path(getwd(), "tables"))
if (!file.exists("scripts")) dir.create(file.path(getwd(), "scripts"))
# Save params
saveRDS(params, file = "R_Objects/bdiv_params.RDS")
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(ggpubr)
library(rstatix)
library(vegan)
library(ape)
library(kableExtra)
# Create used folders if missing
if (!file.exists("R_objects")) dir.create(file.path(getwd(), "R_objects"))
if (!file.exists("plots")) dir.create(file.path(getwd(), "plots"))
if (!file.exists("tables")) dir.create(file.path(getwd(), "tables"))
if (!file.exists("scripts")) dir.create(file.path(getwd(), "scripts"))
# Save params
saveRDS(params, file = "R_Objects/bdiv_params.RDS")
multiple_rarefy <- function(physeq, ntables=100, depth = min(rowSums(rawtab))*0.9, distmethod="bray", summarymeasure=mean, seedstart=500, verbose=TRUE) {
require("vegan")
# Orientate the OTU correctly
if (taxa_are_rows(physeq)){rawtab<-unclass(t(otu_table(physeq)))} else rawtab <- unclass(otu_table(physeq))
# Ignore samples below rarefaction depth
ind <- (rowSums(rawtab) < depth)
sam.discard <- rownames(rawtab)[ind]
otu.tab <- rawtab[!ind, ]
# Rarefaction function
rarefy <- function(x, depth) {
y <- sample(rep(1:length(x), x), depth)
y.tab <- table(y)
j <- numeric(length(x))
j[as.numeric(names(y.tab))] <- y.tab
j
}
# Table to output rarefied data
final_tab = c()
# Run each sample separately
for (z in 1:nrow(otu.tab)) {
if (verbose==TRUE) {
print(paste("Rarefaction sample number", z, sep=" "))
}
numbers <- otu.tab[z,]
# Rarefy the sample ntables times
set.seed(seedstart + z)
rare_tab <- lapply(1:ntables,function(k) rarefy(numbers,depth))
rare_tab <- do.call(rbind, rare_tab)
# # Remove columns with no reads
# rare_tab_no_zero <- rare_tab[,colSums(rare_tab) != 0]
# # distance across reps for subject z
distmat = as.matrix(vegdist(rare_tab, method=distmethod))
# calculate mean distance for each rep
distsummary = apply(distmat, 2, summarymeasure)
# the best rep is the one with the mean distance to all other reps. (in case of ties, just select the first)
whichbestrep = which(distsummary == min(distsummary))[1]
# select that rep only for subject z
bestrep = rare_tab[whichbestrep,]
# build that rep for subject y into final table
final_tab = rbind(final_tab, bestrep)
}
# Remove samples with too few reads
physeq <- prune_samples(!sample_names(physeq) %in% sam.discard, physeq)
# Reformat final tab and return to the physeq object
rownames(final_tab) = rownames(otu.tab)
colnames(final_tab) = colnames(otu.tab)
otu_table(physeq) <- otu_table(t(final_tab), taxa_are_rows = T)
# Return physeq to the environment
return(physeq)
}
# save functions
save(multiple_rarefy, file = "scripts/mrarefy.Rdata")
# clear the environment and release memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
invisible(gc()) #free up memory and report the memory usage.
params <- readRDS("R_objects/bdiv_params.RDS")
load("scripts/mrarefy.Rdata")
# Load phyloseq
load(params$input)
# Perform multiple rarefactions
phy.rare <- multiple_rarefy(phy)
# Remove empty taxa
phy.rare <- prune_taxa(taxa_sums(phy.rare) > 0, phy.rare)
# Root tree
phy_tree(phy) <- ape::root(phy_tree(phy), sample(taxa_names(phy), 1), resolve.root = TRUE)
# Save object
save(phy.rare, file = "R_objects/Phyloseq_rarefied.Rdata")
# clear the environment and release memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
invisible(gc()) #free up memory and report the memory usage.
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load("R_objects/Phyloseq_rarefied.Rdata")
load("scripts/mrarefy.Rdata")
# Root tree if necessary
if (!is.rooted(phy_tree(phy.rare))) phy_tree(phy.rare) <- ape::root(phy_tree(phy.rare), sample(taxa_names(phy.rare), 1), resolve.root = TRUE)
# Calculate UniFrac distances
unif.dist <- UniFrac(phy.rare, weighted = FALSE, parallel = FALSE)
# Calculate PCoA data
unif.pcoa <- ordinate(phy.rare, method = "PCoA",distance = unif.dist)
unif.nmds <- metaMDS(unif.dist, k = 5, trymax = 1000)
# Save distance objects
save(unif.dist, unif.nmds, unif.pcoa, file = "R_objects/UniF.RData")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load("R_objects/Phyloseq_rarefied.Rdata")
load("scripts/mrarefy.Rdata")
# Root tree if necessary
if (!is.rooted(phy_tree(phy.rare))) phy_tree(phy.rare) <- ape::root(phy_tree(phy.rare), sample(taxa_names(phy.rare), 1), resolve.root = TRUE)
# Calculate UniFrac distances
unif.dist <- UniFrac(phy.rare, weighted = FALSE, parallel = FALSE)
# Calculate PCoA data
unif.pcoa <- ordinate(phy.rare, method = "PCoA",distance = unif.dist)
unif.nmds <- metaMDS(unif.dist, k = 5, trymax = 1000)
# Save distance objects
save(unif.dist, unif.nmds, unif.pcoa, file = "R_objects/UniF.RData")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load(params$input)
# Root tree if necessary
if (!is.rooted(phy_tree(phy))) phy_tree(phy) <- ape::root(phy_tree(phy), sample(taxa_names(phy), 1), resolve.root = TRUE)
# Calculate UniFrac distances
wuf.dist <- UniFrac(phy, weighted = TRUE, parallel = FALSE)
# Calculate PCoA data
wuf.pcoa <- ordinate(phy, method = "PCoA",distance = wuf.dist)
wuf.nmds <- metaMDS(wuf.dist, k = 5, trymax = 1000)
# Save distance objects
save(wuf.dist, wuf.nmds, wuf.pcoa, file = "R_objects/wUniF.RData")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load(params$input)
# transform counts
phy.ra <- transform_sample_counts(phy, function(x) x/sum(x))
# Calculate Bray-Curtis dissimilarities
bray.dist <- distance(phy.ra, method = "bray",)
# Calculate PCoA data
bray.pcoa <- ordinate(phy, method = "PCoA",distance = bray.dist)
bray.nmds <- metaMDS(bray.dist, k = 5, trymax = 1000)
# Save distance objects
save(bray.dist, bray.nmds, bray.pcoa, file = "R_objects/Bray.RData")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load("R_objects/Phyloseq_rarefied.Rdata")
load("R_objects/UniF.RData")
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy.rare))
# Run PERMANOVA for batch variable
FORMULA <- as.formula(paste("unif.dist ~ ", params$batch, sep = ""))
batch.PERM <- adonis2(FORMULA, data = mdat)
# Compare the betadiversity dispertion for the batch variable
batch.bdisp <- betadisper(unif.dist, mdat[,params$batch])
anova(batch.bdisp)
# If significant a post hoc test can compare pairwise
TukeyHSD(batch.bdisp)
plot(batch.bdisp)
boxplot(batch.bdisp)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load(params$input)
load("R_objects/wUniF.RData")
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy))
# Run PERMANOVA for batch variable
FORMULA <- as.formula(paste("wuf.dist ~ ", params$batch, sep = ""))
batch.PERM <- adonis2(FORMULA, data = mdat)
# Compare the betadiversity dispertion for the batch variable
batch.bdisp <- betadisper(wuf.dist, mdat[,params$batch])
anova(batch.bdisp)
# If significant a post hoc test can compare pairwise
TukeyHSD(batch.bdisp)
plot(batch.bdisp)
boxplot(batch.bdisp)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load(params$input)
load("R_objects/Bray.RData")
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy))
# Run PERMANOVA for batch variable
FORMULA <- as.formula(paste("bray.dist ~ ", params$batch, sep = ""))
batch.PERM <- adonis2(FORMULA, data = mdat)
# Compare the betadiversity dispertion for the batch variable
batch.bdisp <- betadisper(bray.dist, mdat$Run)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(ggpubr)
library(rstatix)
library(vegan)
library(ape)
library(kableExtra)
# Create used folders if missing
if (!file.exists("R_objects")) dir.create(file.path(getwd(), "R_objects"))
if (!file.exists("plots")) dir.create(file.path(getwd(), "plots"))
if (!file.exists("tables")) dir.create(file.path(getwd(), "tables"))
if (!file.exists("scripts")) dir.create(file.path(getwd(), "scripts"))
# Save params
saveRDS(params, file = "R_Objects/bdiv_params.RDS")
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load(params$input)
load("R_objects/Bray.RData")
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy))
# Run PERMANOVA for batch variable
FORMULA <- as.formula(paste("bray.dist ~ ", params$batch, sep = ""))
batch.PERM <- adonis2(FORMULA, data = mdat)
# Compare the betadiversity dispertion for the batch variable
batch.bdisp <- betadisper(bray.dist, mdat$Run)
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load(params$input)
load("R_objects/Bray.RData")
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy))
# Run PERMANOVA for batch variable
FORMULA <- as.formula(paste("bray.dist ~ ", params$batch, sep = ""))
batch.PERM <- adonis2(FORMULA, data = mdat)
# Compare the betadiversity dispertion for the batch variable
batch.bdisp <- betadisper(bray.dist, mdat$batch)
params <- readRDS("R_objects/bdiv_params.RDS")
# load
load(params$input)
load("R_objects/Bray.RData")
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy))
# Run PERMANOVA for batch variable
FORMULA <- as.formula(paste("bray.dist ~ ", params$batch, sep = ""))
batch.PERM <- adonis2(FORMULA, data = mdat)
# Compare the betadiversity dispertion for the batch variable
batch.bdisp <- betadisper(bray.dist, mdat[,params$batch])
anova(batch.bdisp)
# If significant a post hoc test can compare pairwise
TukeyHSD(batch.bdisp)
plot(batch.bdisp)
boxplot(batch.bdisp)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
params <- readRDS("R_objects/bdiv_params.RDS")
# Choose metric
METRIC <- "UniF"
# Choose variable
VAR <- "feed"
# Load data
load(params$input)
if (METRIC == "UniF") {
load("R_objects/UniF.RData")
dist.used <- unif.dist
nmds.used <- unif.nmds
pcoa.used <- unif.pcoa
rm(unif.dist, unif.nmds, unif.pcoa)
} else if (METRIC == "wUnif") {
load("R_objects/wUniF.RData")
dist.used <- wuf.dist
nmds.used <- wuf.nmds
pcoa.used <- wuf.pcoa
rm(wuf.dist, wuf.nmds, wuf.pcoa)
} else if (METRIC == "Bray"){
load("R_objects/Bray.RData")
dist.used <- bray.dist
nmds.used <- bray.nmds
pcoa.used <- bray.pcoa
rm(bray.dist, bray.nmds, bray.pcoa)
}
# Extract metadata from phyloseq
mdat <- data.frame(sample_data(phy))
# If a variable consist of numbers, but represent distinct groups remember to make it into a factor
mdat[,VAR] <- as.factor(mdat[,VAR])
# Compare the betadiversity dispertion for Weighted UniFrac
bdisp <- betadisper(dist.used, mdat[,VAR], bias.adjust=TRUE)
anova(bdisp)
# dispertion by group
boxplot(bdisp)
# Test which groups differ (only if the anova test was significant)
(HSD <- TukeyHSD(bdisp))
plot(HSD)
# Run PERMANOVA for the variable
FORMULA <- as.formula(paste("dist.used ~", VAR, sep = " "))
(perm.test <- adonis2(FORMULA, data = mdat, permutations = 9999,na.action = na.omit))
# Use vegan to test how well metadata fits ordination
fit.out <- envfit(nmds.used, mdat[,c("feed","dnaC")],na.rm=TRUE)
fit.out
# Extract eigen values
eigen <- pcoa.used$values
eigen$Axis <- as.numeric(row.names(eigen))
# Create plots for both distance indeces
p.eigen <- ggplot(eigen[1:10,], aes(x = as.factor(Axis), y = 100*Rel_corr_eig)) +
geom_col(aes(fill = as.factor(Axis))) +
geom_point(aes(x = Axis, y = 100*Cum_corr_eig)) +
geom_line(aes(x = Axis, y = 100*Cum_corr_eig)) +
ylab("Variance explained (%)") +
xlab("Axis") +
theme_pubr(legend = "none") + ggsci::scale_fill_jco()
p.eigen + ggtitle(paste("Variance per axis for", METRIC, sep = " "))
suppressMessages(ggsave(plot = p.eigen, filename = paste0("plots/bdiv_PCoA_axis",METRIC,".png"), device = "png"))
# Create plots of eigenvalues for PCoA plots
pcoa.tab <- plot_ordination(phy, pcoa.used,axes = 1:5,justDF = TRUE)
nmds.tab <- plot_ordination(phy, nmds.used,axes = 1:5,justDF = TRUE)
# Reformat tables to create one common table
colnames(nmds.tab)[1:5] <- c("Axis.1","Axis.2","Axis.3","Axis.4","Axis.5")
nmds.tab$ordination <- "nmds"
pcoa.tab$ordination <- "pcoa"
ord.tab <- rbind(nmds.tab,pcoa.tab)
ord.tab$Week_clean <- as.factor(ord.tab$Week_clean)
# Create plots of eigenvalues for PCoA plots
pcoa.tab <- plot_ordination(phy, pcoa.used,axes = 1:5,justDF = TRUE)
nmds.tab <- plot_ordination(phy, nmds.used,axes = 1:5,justDF = TRUE)
# Reformat tables to create one common table
colnames(nmds.tab)[1:5] <- c("Axis.1","Axis.2","Axis.3","Axis.4","Axis.5")
nmds.tab$ordination <- "nmds"
pcoa.tab$ordination <- "pcoa"
ord.tab <- rbind(nmds.tab,pcoa.tab)
ord.tab$feed <- as.factor(ord.tab$feed)
# Melt axis to be in one variable
axis.tab <- pivot_longer(data = ord.tab, cols = c("Axis.1","Axis.2","Axis.3","Axis.4","Axis.5"), names_to = "Axis", values_to = "position")
# Plot positions on axes
ggplot(axis.tab, aes_string(x = "ordination", y = "position", fill = VAR)) +
geom_boxplot() +
facet_grid(Axis~.) +
coord_flip() +
theme_pubr(legend = "bottom") + ggsci::scale_fill_jco()
# Create ordination plots
plot.beta <- ggplot(ord.tab[!is.na(ord.tab[,VAR]),], aes_string(x = "Axis.1", y = "Axis.2", color = VAR)) +
geom_point() +
facet_grid(.~ordination, scales = "free") +
theme_pubr(legend = "bottom") +
labs(color=VAR) +
stat_ellipse() #+ ggsci::scale_color_jco()
plot.beta
# extract arrows
arrows <- data.frame(fit.out$vectors$arrows)
colnames(arrows) <- c("xend","yend")
arrows$length <- sqrt(fit.out$vectors$r)
arrows$x = 0
arrows$y = 0
arrows$xend <- with(arrows, xend*length)
arrows$yend <- with(arrows, yend*length)
# Add arrows to plot
ggplot(ord.tab[!is.na(ord.tab[,VAR]),], aes_string(x = "Axis.1", y = "Axis.2")) +
geom_point(aes(color = VAR)) +
facet_grid(.~ordination, scales = "free") +
theme_pubr(legend = "bottom") +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend, color = "red"), data = arrows, arrow = arrow(type = "closed", length = unit(0.1, "inches")),show.legend = FALSE) + geom_text(data = arrows, aes(x = xend/2, y = yend/2, label = row.names(arrows), color = "red"), show.legend = F)
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
