if (!file.exists(paste0("plots/differential_abundance/",SUBNAME))) dir.create(file.path(getwd(), paste0("plots/differential_abundance/",SUBNAME)))
# Load data
load(paste0("R_objects/Agglomerated_",SUBNAME,".RData"))
#Subset and specify level
if (LVL == "Genus") {
phy.ge <- subset_samples(phy.ge, treatment == "PFOS" & day != "d0")
phy.used <- phy.ge
F.LVL <- "Family"
} else if (LVL == "Family") {
phy.fa <- subset_samples(phy.fa, treatment == "PFOS" & day != "d0")
phy.used <- phy.fa
F.LVL <- "Family"
} else if (LVL == "Order") {
phy.or <- subset_samples(phy.or, treatment == "PFOS" & day != "d0")
phy.used <- phy.or
F.LVL <- "Order"
} else if (LVL == "Class") {
phy.cl <- subset_samples(phy.cl, treatment == "PFOS" & day != "d0")
phy.used <- phy.cl
F.LVL <- "Class"
}
if (grepl("Feces_d",SUBNAME) == TRUE) {
phy.hf <- subset_samples(phy.used, feed == "HF")
phy.lf <- subset_samples(phy.used, feed == "LF")
FEEDS <- c("HF","LF")
for (FEED in FEEDS) {
if (FEED == "HF") {
phy.used <- phy.hf
} else if (FEED == "LF") {
phy.used <- phy.lf
}
# Filter data
filt <- preDA(data = phy.used, min.reads = 20, min.samples = 4)
filt <- transform_sample_counts(filt, function(x) x/sum(x))
# Run spearman selected analysis
filt.DA <- DA.spe(filt, predictor = PDI, exact = FALSE)
# Evaluate the plot and summary table
table(filt.DA$pval.adj < 0.05)
filt.p5 <- filt.DA[filt.DA$pval.adj < 0.05,]
filt.p5 <- filter(filt.p5, rowSums(is.na(filt.p5)) != ncol(filt.p5))
filt.p5
if (any(filt.p5$pval.adj > 0)) {
# Create a subset of the samples
filt.ra <- transform_sample_counts(filt, function(x) x/sum(x)*100)
DA.sig <- prune_taxa(filt.DA$Feature[filt.DA$pval.adj < 0.05], x = filt.ra)
# melt the data
DAm <- psmelt(DA.sig)
# Add pseudo count
pseudocount <- min(DAm$Abundance[DAm$Abundance != 0])
# Create plot
p.cor <- ggplot(DAm, aes(x = .data[[PDI]], y = Abundance+pseudocount, color = .data[[LVL]])) +
geom_jitter() +
geom_smooth(method=lm) +
facet_wrap(F.LVL, scales = "free_y") +
scale_y_log10() +
scale_x_continuous() + #liver: 1.717, 2.931, 0.25   Serum: 21.84, 69.92, 10
theme_pubr()
p.cor
print(p.cor)
# Save output
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_",FEED,".pdf"), p.cor, device = "pdf", units = "mm", width = 400, height = 300, dpi = 300))
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_",FEED,".png"), p.cor, device = "png", units = "mm", width = 400, height = 300, dpi = 300))
if (any(filt.p5$rho > 0)) {
DA.sigpos <- prune_taxa(filt.DA$Feature[filt.DA$pval.adj < 0.05 & filt.DA$rho > 0], x = filt.ra)
# melt the data
DAmpos <- psmelt(DA.sigpos)
# Add pseudo count
pseudocount <- min(DAmpos$Abundance[DAmpos$Abundance != 0])
# Create positive corr plots
p.pos <- ggplot(DAmpos, aes(x = .data[[PDI]], y = Abundance+pseudocount, color = .data[[LVL]])) +
geom_jitter() +
geom_smooth(method=lm) +
facet_wrap(F.LVL, scales = "free_y") +
scale_y_log10() +
scale_x_continuous() + #liver: 1.717, 2.931, 0.25   Serum: 21.84, 69.92, 10
theme_pubr()
p.pos
# Print output
print(p.pos)
# Save output
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_",FEED,"_positive.pdf"), p.pos, device = "pdf", units = "mm", width = 400, height = 300, dpi = 300))
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_",FEED,"_positive.png"), p.pos, device = "png", units = "mm", width = 400, height = 300, dpi = 300))
} else {print(paste0("No positive correlations for ",LVL," in ",SUBNAME,"."))}
if (any(filt.p5$rho < 0)) {
DA.signeg <- prune_taxa(filt.DA$Feature[filt.DA$pval.adj < 0.05 & filt.DA$rho < 0], x = filt.ra)
# melt the data
DAmneg <- psmelt(DA.signeg)
# Add pseudo count
pseudocount <- min(DAmneg$Abundance[DAmneg$Abundance != 0])
# Create negative corr plots
p.neg <- ggplot(DAmneg, aes(x = .data[[PDI]], y = Abundance+pseudocount, color = .data[[LVL]])) +
geom_jitter() +
geom_smooth(method=lm) +
facet_wrap(F.LVL, scales = "free_y") +
scale_y_log10() +
scale_x_continuous() + #liver: 1.717, 2.931, 0.25   Serum: 21.84, 69.92, 10
theme_pubr()
p.neg
# Print output
print(p.neg)
# Save output
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_",FEED,"_negative.pdf"), p.neg, device = "pdf", units = "mm", width = 400, height = 300, dpi = 300))
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_",FEED,"_negative.png"), p.neg, device = "png", units = "mm", width = 400, height = 300, dpi = 300))
} else {print(paste0("No negative correlations for ",LVL," in ",SUBNAME,"."))}
}
}
#############################
} else {
# Filter data
filt <- preDA(data = phy.used, min.reads = 20, min.samples = 4)
filt <- transform_sample_counts(filt, function(x) x/sum(x))
# Run spearman selected analysis
filt.DA <- DA.spe(filt, predictor = PDI, exact = FALSE)
# Evaluate the plot and summary table
table(filt.DA$pval.adj < 0.05)
filt.p5 <- filt.DA[filt.DA$pval.adj < 0.05,]
filt.p5 <- filter(filt.p5, rowSums(is.na(filt.p5)) != ncol(filt.p5))
filt.p5
if (any(filt.p5$pval.adj > 0)) {
# Create a subset of the samples
filt.ra <- transform_sample_counts(filt, function(x) x/sum(x)*100)
DA.sig <- prune_taxa(filt.DA$Feature[filt.DA$pval.adj < 0.05], x = filt.ra)
# melt the data
DAm <- psmelt(DA.sig)
# Add pseudo count
pseudocount <- min(DAm$Abundance[DAm$Abundance != 0])
# Create plot
p.cor <- ggplot(DAm, aes(x = .data[[PDI]], y = Abundance+pseudocount, color = .data[[LVL]])) +
geom_jitter() +
geom_smooth(method=lm) +
facet_wrap(F.LVL, scales = "free_y") +
scale_y_log10() +
scale_x_continuous() + #liver: 1.717, 2.931, 0.25   Serum: 21.84, 69.92, 10
theme_pubr()
p.cor
print(p.cor)
# Save output
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,".pdf"), p.cor, device = "pdf", units = "mm", width = 400, height = 300, dpi = 300))
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,".png"), p.cor, device = "png", units = "mm", width = 400, height = 300, dpi = 300))
if (any(filt.p5$rho > 0)) {
DA.sigpos <- prune_taxa(filt.DA$Feature[filt.DA$pval.adj < 0.05 & filt.DA$rho > 0], x = filt.ra)
# melt the data
DAmpos <- psmelt(DA.sigpos)
# Add pseudo count
pseudocount <- min(DAmpos$Abundance[DAmpos$Abundance != 0])
# Create positive corr plots
p.pos <- ggplot(DAmpos, aes(x = .data[[PDI]], y = Abundance+pseudocount, color = .data[[LVL]])) +
geom_jitter() +
geom_smooth(method=lm) +
facet_wrap(F.LVL, scales = "free_y") +
scale_y_log10() +
scale_x_continuous() + #liver: 1.717, 2.931, 0.25   Serum: 21.84, 69.92, 10
theme_pubr()
p.pos
# Print output
print(p.pos)
# Save output
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_positive.pdf"), p.pos, device = "pdf", units = "mm", width = 400, height = 300, dpi = 300))
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_positive.png"), p.pos, device = "png", units = "mm", width = 400, height = 300, dpi = 300))
} else {print(paste0("No positive correlations for ",LVL," in ",SUBNAME,"."))}
if (any(filt.p5$rho < 0)) {
DA.signeg <- prune_taxa(filt.DA$Feature[filt.DA$pval.adj < 0.05 & filt.DA$rho < 0], x = filt.ra)
# melt the data
DAmneg <- psmelt(DA.signeg)
# Add pseudo count
pseudocount <- min(DAmneg$Abundance[DAmneg$Abundance != 0])
# Create negative corr plots
p.neg <- ggplot(DAmneg, aes(x = .data[[PDI]], y = Abundance+pseudocount, color = .data[[LVL]])) +
geom_jitter() +
geom_smooth(method=lm) +
facet_wrap(F.LVL, scales = "free_y") +
scale_y_log10() +
scale_x_continuous() + #liver: 1.717, 2.931, 0.25   Serum: 21.84, 69.92, 10
theme_pubr()
p.neg
# Print output
print(p.neg)
# Save output
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_negative.pdf"), p.neg, device = "pdf", units = "mm", width = 400, height = 300, dpi = 300))
suppressMessages(ggsave(paste0("plots/differential_abundance/",SUBNAME,"/Correlation_",SUBNAME,"_",PDI,"_",LVL,"_negative.png"), p.neg, device = "png", units = "mm", width = 400, height = 300, dpi = 300))
} else {print(paste0("No negative correlations for ",LVL," in ",SUBNAME,"."))}
} else {
print(paste0("No signficance found in filt.p5 in ",PDI," for ",SUBNAME," at ",LVL,"."))
}
}
}
}
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(decontam)
library(pals)
library(ggpubr)
library(vegan)
library(phangorn)
library(kableExtra)
library(plotly)
library(rstatix)
library(forcats)
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(DAtest)
library(ggrepel)
# Save params
saveRDS(params, file = "R_objects/animal_params.RDS")
dat.abu <- read.csv(file = "input/result_mean_Fibrex.csv", header = TRUE, sep = ";", dec = ",")
dat.abu
View(dat.abu)
# Load relative abundance data from 16S amplicons
load("R_objects/Phyloseq.Rdata")
# Load relative abundance data from 16S amplicons
load("R_objects/Agglomerated_all.RData")
View(dat.abu)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(decontam)
library(pals)
library(ggpubr)
library(vegan)
library(phangorn)
library(kableExtra)
library(plotly)
library(rstatix)
library(forcats)
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(DAtest)
library(ggrepel)
# Save params
saveRDS(params, file = "R_objects/animal_params.RDS")
dat <- sample_data(phy)
# Load calculated mean values for absolute abundance
dat.abu <- read.csv(file = "input/result_mean_Fibrex.csv", header = TRUE, sep = ";", dec = ",")
# Load relative abundance data from 16S amplicons
load("R_objects/Agglomerated_all.RData")
dat <- sample_data(phy)
dat.abu <- subset(dat.abu, day != "20")
dat.abu <- subset(dat.abu, day != 20)
dat.abu <- subset(dat.abu, Day != 20)
View(dat.abu)
View(dat)
phy <- subset_samples(phy, day != "d20")
dat <- sample_data(phy)
View(dat.abu)
dat <- sample_data(phy)
dat.abu$Name[!(dat.abu$Name %in% dat$Sample)]
dat.abu <- subset(dat.abu, Day != 20 & Type == "Feces")
# Load relative abundance data from 16S amplicons
load("R_objects/Agglomerated_all.RData")
phy <- subset_samples(phy, day != "d20" & material == "Feces")
dat <- sample_data(phy)
dat.abu$Name[!(dat.abu$Name %in% dat$Sample)]
# Load calculated mean values for absolute abundance
dat.abu <- read.csv(file = "input/result_mean_Fibrex.csv", header = TRUE, sep = ";", dec = ",")
dat.abu <- subset(dat.abu, Day != 20 & Type == "Feces")
dat.abu <- subset(dat.abu, day != 20 & material == "Feces")
# Load relative abundance data from 16S amplicons
load("R_objects/Agglomerated_all.RData")
phy <- subset_samples(phy, day != "d20" & material == "Feces")
dat <- sample_data(phy)
# Test for mismatches between tables
dat.abu$Name[!(dat.abu$Name %in% dat$Sample)]
?merge
# Merge the two
dam <- merge(dat.abu, dat, by = "Sample")
dat <- data.frame(sample_data(phy))
# Test for mismatches between tables
dat.abu$Name[!(dat.abu$Name %in% dat$Sample)]
# Merge the two
dam <- merge(dat.abu, dat, by = "Sample")
View(dam)
# Load calculated mean values for absolute abundance
dat.abu <- read.csv(file = "input/result_mean_Fibrex.csv", header = TRUE, sep = ";", dec = ",")
dat.abu <- subset(dat.abu, day != 20 & material == "Feces")
# Load relative abundance data from 16S amplicons
load("R_objects/Agglomerated_all.RData")
phy <- subset_samples(phy, day != "d20" & material == "Feces")
dat.phy <- data.frame(sample_data(phy))
# Test for mismatches between tables
dat.abu$Name[!(dat.abu$Name %in% dat$Sample)]
# Merge the two
dam <- merge(dat.phy, dat.abu, by = "Sample")
View(dam)
# Merge the two
dam <- merge(dat.phy, dat.abu, by = "Sample")
p <- ggplot(dam, aes(x = material, y = quantity_mean, color = feed_treat)) +
geom_boxplot()
p
# Load calculated mean values for absolute abundance
dat.abu <- read.csv(file = "input/result_mean_Fibrex.csv", header = TRUE, sep = ";", dec = ",")
dat.abu <- subset(dat.abu, day != 20 & material == "Feces")
dat.abu <- subset(dat.abu, Day != 20 & mat_type == "Feces")
# Load relative abundance data from 16S amplicons
load("R_objects/Agglomerated_all.RData")
phy <- subset_samples(phy, day != "d20" & material == "Feces")
dat.phy <- data.frame(sample_data(phy))
# Test for mismatches between tables
dat.abu$Name[!(dat.abu$Name %in% dat$Sample)]
# Merge the two
dam <- merge(dat.phy, dat.abu, by = "Sample")
p <- ggplot(dam, aes(x = material, y = quantity_mean, color = feed_treat)) +
geom_boxplot()
p
p <- ggplot(dam, aes(x = feed_treat, y = quantity_mean, color = day)) +
geom_boxplot()
p
p
p <- ggplot(dam, aes(x = Plate, y = quantity_mean, color = day)) +
geom_boxplot()
p
p <- ggplot(dam, aes(x = plate, y = quantity_mean, color = day)) +
geom_boxplot()
p
p <- ggplot(dam, aes(x = plate, y = quantity_mean)) +
geom_boxplot()
p
stat <- dam %>%
anova_test(quantity_mean ~ plate)
stat
stat <- dam %>%
wilcox_test(quantity_mean ~ plate)
stat
stat <- dam %>%
kruskal_test(quantity_mean ~ plate)
stat
# Set names of variables
PREDICTOR <- "plate"
OUTCOME <- "quantity_mean"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dam %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dam %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dam %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = c("full"))
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
# Create plot
bxp <- dam %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dam %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Build the linear model
model  <- lm(FORMULA, data = dam)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
dat.clean %>% levene_test(FORMULA)
dam %>% levene_test(FORMULA)
# Calculate Levene's test for equal variance
dam %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
# Save result
EQUAL.VAR <- dam %>% levene_test(FORMULA) %>% pull(p) > 0.05
p <- ggplot(dam, aes(x = plate, y = quantity_mean)) +
geom_boxplot()
p
p <- ggplot(dam, aes(x = plate, y = quantity_mean, color = plate)) +
geom_boxplot()
p
stat <- dam %>%
kruskal_test(quantity_mean ~ plate) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat <- dam %>%
kruskal_test(quantity_mean ~ plate) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat
stat.tsd <- dam %>%
dunn_test(quantity_mean ~ plate)  %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.tsd
# Load calculated mean values for absolute abundance
dat.abu <- read.csv(file = "input/result_mean_Fibrex_corrected.csv", header = TRUE, sep = ";", dec = ",")
# Load calculated mean values for absolute abundance
dat.abu <- read.csv(file = "input/result_mean_Fibrex_corrected.csv", header = TRUE, sep = ";", dec = ",")
dat.abu <- subset(dat.abu, Day != 20 & mat_type == "Feces")
# Load relative abundance data from 16S amplicons
load("R_objects/Agglomerated_all.RData")
phy <- subset_samples(phy, day != "d20" & material == "Feces")
dat.phy <- data.frame(sample_data(phy))
# Test for mismatches between tables
dat.abu$Name[!(dat.abu$Name %in% dat$Sample)]
# Merge the two
dam <- merge(dat.phy, dat.abu, by = "Sample")
# Set names of variables
PREDICTOR <- "plate"
OUTCOME <- "quantity_mean"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dam %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dam %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = c("full"))
# Create plot
bxp <- dam %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dam %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dam)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Calculate Levene's test for equal variance
dam %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dam %>% levene_test(FORMULA) %>% pull(p) > 0.05
## Not normally distrubuted and equal variance -> Kruskal-Wallis with post-hoc Dunn's test
p <- ggplot(dam, aes(x = plate, y = quantity_mean, color = plate)) +
geom_boxplot()
p
p
stat <- dam %>%
kruskal_test(quantity_mean ~ plate) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat
stat.tsd <- dam %>%
dunn_test(quantity_mean ~ plate)  %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.tsd
# Test for outliers
dam %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Build the linear model
model  <- lm(FORMULA, data = dam)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Calculate Levene's test for equal variance
dam %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dam %>% levene_test(FORMULA) %>% pull(p) > 0.05
## Not normally distrubuted and equal variance -> Kruskal-Wallis with post-hoc Dunn's test
p <- ggplot(dam, aes(x = plate, y = quantity_mean, color = plate)) +
geom_boxplot()
p
stat <- dam %>%
kruskal_test(quantity_mean ~ plate) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat
stat.tsd <- dam %>%
dunn_test(quantity_mean ~ plate)  %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.tsd
# Test for outliers
olr <- dam %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
View(olr)
p.stat <- p + stat_pvalue_manual(stat.tsd, tip.length = 0, hide.ns = TRUE, label = "p.format")
p.stat <- p + stat_pvalue_manual(stat.tsd, tip.length = 0, hide.ns = TRUE, label = "p.adj.signif")
stat.tsd <- dam %>%
dunn_test(quantity_mean ~ plate)  %>%
add_significance() %>%
add_xy_position(x = .[[OUTCOME]], dodge = 0.8) %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.tsd
p.stat <- p + stat_pvalue_manual(stat.tsd, tip.length = 0, hide.ns = TRUE, label = "p.adj.signif")
p.stat
p.stat <- p + stat_pvalue_manual(stat.tsd, tip.length = 0, hide.ns = FALSE label = "p.adj.signif")
p.stat <- p + stat_pvalue_manual(stat.tsd, tip.length = 0, hide.ns = FALSE label = "p.adj.signif")
p.stat <- p + stat_pvalue_manual(stat.tsd, tip.length = 0, hide.ns = FALSE, label = "p.adj.signif")
p.stat
install.packages(c("ape", "BayesFactor", "BH", "bookdown", "boot", "brew", "brio", "bslib", "callr", "circlize", "cli", "coda", "codetools", "commonmark", "compositions", "cowplot", "curl", "CVXR", "data.table", "DBI", "dbplyr", "deldir", "desc", "DescTools", "digest", "emmeans", "estimability", "expm", "fansi", "filelock", "FNN", "gganimate", "ggfun", "ggnetwork", "ggnewscale", "ggplot2", "ggpp", "ggrepel", "ggsci", "gh", "glue", "gmp", "gplots", "Hmisc", "htmltools", "httpuv", "httr2", "igraph", "intergraph", "interp", "kableExtra", "knitr", "later", "lattice", "lme4", "locfit", "magick", "maps", "MASS", "Matrix", "matrixStats", "mgcv", "multcompView", "munsell", "patchwork", "phyloseqGraphTest", "pkgbuild", "pkgdown", "pkgload", "plotly", "processx", "promises", "ps", "pscl", "ragg", "Rcpp", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RcppHNSW", "RCurl", "readr", "remotes", "repr", "reprex", "rlang", "rmarkdown", "Rmpfr", "Rmpi", "robustbase", "roxygen2", "RSQLite", "rstudioapi", "Rtsne", "RUnit", "rvest", "s2", "sandwich", "sass", "sf", "shape", "shiny", "sp", "splus2R", "stringi", "survival", "svglite", "systemfonts", "tensorA", "testthat", "tidyr", "tidyselect", "tidytree", "timechange", "tinytex", "tweenr", "usethis", "utf8", "uuid", "uwot", "vipor", "viridis", "winch", "withr", "xfun", "XML", "xts", "yaml", "yulab.utils", "zCompositions", "zip"))
