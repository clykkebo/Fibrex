# Save combined graphics
ggsave(filename = "plots/figures/diversity_combined_bray_jac.png", p.all, device = "png", dpi = 300, height = 350, width = 350, units = "mm")
ggsave(filename = "plots/figures/diversity_combined_bray_jac.pdf", p.all, device = "pdf", dpi = 300, height = 350, width = 350, units = "mm")
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
knitr::opts_chunk$set(echo = TRUE)
library(GMHmicrobiome)
library(ggpubr)
library(kableExtra)
library(phyloseq)
# save parameters
saveRDS(params, "R_objects/params_description.RDS")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
# load data
load("R_objects/Agglomerated_Feces.RData")
params <- readRDS("R_objects/params_description.RDS")
# Remove samples with missing data
phy.use <- prune_samples(sample_names(phy.ge)[!is.na(sample_data(phy.ge)[,params$group_var]) & !is.na(sample_data(phy.ge)[,params$time_var])], phy.ge)
# Transform data
phy.rel <- transform_sample_counts(phy.use, fun = function(x) x/sum(x)*100)
dat <- psmelt(phy.rel)
# summarise per sample
sumsample <-
dat %>%
filter(Abundance > 0) %>%
group_by(Sample, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(pct_0 = n(),
pct_0.1 = sum(Abundance < 0.1),
pct_0_1 = sum(Abundance >= 0.1 & Abundance < 1),
pct_1_10 = sum(Abundance >= 1 & Abundance < 10),
pct_10 = sum(Abundance > 10)) %>%
pivot_longer(starts_with("pct"),
names_to = c("Cutoff"),
values_to = "Count") %>%
group_by(Cutoff, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(mean = round(mean(Count),2),
sd = round(sd(Count),2))
# summarise total
sumall <- dat %>%
filter(Abundance > 0) %>%
group_by(OTU, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(Abundance = mean(Abundance)) %>%
group_by(.data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(pct_0 = n(),
pct_0.1 = sum(Abundance < 0.1),
pct_0_1 = sum(Abundance >= 0.1 & Abundance < 1),
pct_1_10 = sum(Abundance >= 1 & Abundance < 10),
pct_10 = sum(Abundance > 10)) %>%
pivot_longer(starts_with("pct"),
names_to = c("Cutoff"),
values_to = "n")
# Combine
output <- full_join(sumall, sumsample) %>%
pivot_wider(id_cols = c(Cutoff, .data[[params$time_var]]),
names_from = .data[[params$group_var]],
values_from = c(n, mean, sd),
names_vary = "slowest") %>%
mutate(Cutoff=factor(Cutoff))
levels(output$Cutoff) <- c("All", "n < 0.1%", "0.1% < n < 1.0%", "1.0% < n < 10%", "10%  < n")
# Create output table
kable(output, row.names = F,digits = 2, caption = 'Count of genera in general and per sample',align = "r") %>%
kable_classic(full_width = F, position = "left")
# Filter by abundance, then rank
phy.top <- filter_abundance(phy.rel, group = params$group_var,includes = "any") %>% filter_rank(group = params$time_var, min.rank = 6, includes = "any")
#Melt data
dat <- suppressWarnings(psmelt(phy.top))
# Prevent duplicate column names
colnames(dat)[colnames(dat) %in% c("Taxa","SampleID")] <- paste(colnames(dat)[colnames(dat) %in% c("Taxa","SampleID")], "old", sep = "_")
# Rename relevant columns
colnames(dat)[c(1,4)] <- c("Taxa","SampleID")
# Sort taxa
dat.sort <- sort_taxa(dat)
# rename taxa
levels(dat.sort$Taxa) <- LETTERS[seq(length(levels(dat.sort$Taxa)))]
# ensure that the variables are factors
dat.sort[,params$time_var] <- factor(dat.sort[,params$time_var])
dat.sort[,params$subject_var] <- factor(dat.sort[,params$subject_var])
dat.sort[,params$group_var] <- factor(dat.sort[,params$group_var])
# Create plot
p <- ggplot(dat.sort, aes(x = .data[[params$subject_var]],
y = Abundance,
fill = Taxa,
color = Taxa)) +
geom_col() +
xlab("") +
facet_grid(day ~ feed_treat,
space = "free_x",scales = "free_x",
labeller = labeller(day = c("d0" = "Day 0", "d08" = "Day 8", "d12" = "Day 12", "d16" = "Day 16", "d20" = "Day 20", "d21" = "Day 21"),
feed_treat = c("HF_CTRL" = "HF-CTRL","HF_PFOS"="HF-PFOS","LF_CTRL"="LF-CTRL","LF_PFOS"="LF-PFOS"))) +
ggsci::scale_color_d3(palette = "category20") +
ggsci::scale_fill_d3(palette = "category20") +
guides(fill=guide_legend(ncol=2), color=guide_legend(ncol=2)) +
clean_theme()
p
p.fig <- p + theme_pubr(legend = "right", border = TRUE) + theme(axis.text.x = element_text(angle = 90))
if (!file.exists(paste0("plots/relative_abundance"))) dir.create(file.path(getwd(), paste0("plots/relative_abundance")))
ggsave(filename = "plots/figures/Genus_abundance_faeces.png", plot = p.fig, device = "png", units = "mm", width = 300, height = 185, dpi = 300)
ggsave(filename = "plots/figures/Genus_abundance_faeces.pdf", plot = p.fig, device = "pdf", units = "mm", width = 300, height = 185, dpi = 300)
# print tax table
tax <- dat.sort %>% distinct(Taxa,.keep_all = T) %>% select(Taxa, Kingdom, Phylum, Class, Order,Family,Genus)  %>% arrange(Taxa)
kable(tax,digits = 2,caption = paste("Taxa plotted", sep = " ")) %>%
kable_classic(full_width = F, position = "left")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
# load data
load("R_objects/Agglomerated_Ileum.RData")
params <- readRDS("R_objects/params_description.RDS")
# Remove samples with missing data
phy.use <- prune_samples(sample_names(phy.ge)[!is.na(sample_data(phy.ge)[,params$group_var]) & !is.na(sample_data(phy.ge)[,params$time_var])], phy.ge)
# Transform data
phy.rel <- transform_sample_counts(phy.use, fun = function(x) x/sum(x)*100)
dat <- psmelt(phy.rel)
# summarise per sample
sumsample <-
dat %>%
filter(Abundance > 0) %>%
group_by(Sample, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(pct_0 = n(),
pct_0.1 = sum(Abundance < 0.1),
pct_0_1 = sum(Abundance >= 0.1 & Abundance < 1),
pct_1_10 = sum(Abundance >= 1 & Abundance < 10),
pct_10 = sum(Abundance > 10)) %>%
pivot_longer(starts_with("pct"),
names_to = c("Cutoff"),
values_to = "Count") %>%
group_by(Cutoff, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(mean = round(mean(Count),2),
sd = round(sd(Count),2))
# summarise total
sumall <- dat %>%
filter(Abundance > 0) %>%
group_by(OTU, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(Abundance = mean(Abundance)) %>%
group_by(.data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(pct_0 = n(),
pct_0.1 = sum(Abundance < 0.1),
pct_0_1 = sum(Abundance >= 0.1 & Abundance < 1),
pct_1_10 = sum(Abundance >= 1 & Abundance < 10),
pct_10 = sum(Abundance > 10)) %>%
pivot_longer(starts_with("pct"),
names_to = c("Cutoff"),
values_to = "n")
# Combine
output <- full_join(sumall, sumsample) %>%
pivot_wider(id_cols = c(Cutoff, .data[[params$time_var]]),
names_from = .data[[params$group_var]],
values_from = c(n, mean, sd),
names_vary = "slowest") %>%
mutate(Cutoff=factor(Cutoff))
levels(output$Cutoff) <- c("All", "n < 0.1%", "0.1% < n < 1.0%", "1.0% < n < 10%", "10%  < n")
# Create output table
kable(output, row.names = F,digits = 2, caption = 'Count of genera in general and per sample',align = "r") %>%
kable_classic(full_width = F, position = "left")
# Filter by abundance, then rank
phy.top <- filter_abundance(phy.rel, group = params$group_var,includes = "any") %>% filter_rank(group = params$time_var, min.rank = 6, includes = "any")
#Melt data
dat <- suppressWarnings(psmelt(phy.top))
# Prevent duplicate column names
colnames(dat)[colnames(dat) %in% c("Taxa","SampleID")] <- paste(colnames(dat)[colnames(dat) %in% c("Taxa","SampleID")], "old", sep = "_")
# Rename relevant columns
colnames(dat)[c(1,4)] <- c("Taxa","SampleID")
# Sort taxa
dat.sort <- sort_taxa(dat)
# rename taxa
levels(dat.sort$Taxa) <- LETTERS[seq(length(levels(dat.sort$Taxa)))]
# ensure that the variables are factors
dat.sort[,params$time_var] <- factor(dat.sort[,params$time_var])
dat.sort[,params$subject_var] <- factor(dat.sort[,params$subject_var])
dat.sort[,params$group_var] <- factor(dat.sort[,params$group_var])
# Create plot
p <- ggplot(dat.sort, aes(x = .data[[params$subject_var]],
y = Abundance,
fill = Taxa,
color = Taxa)) +
geom_col() +
xlab("") +
facet_grid(day ~ feed_treat,
space = "free_x",scales = "free_x",
labeller = labeller(day = c("d0" = "Day 0", "d08" = "Day 8", "d12" = "Day 12", "d16" = "Day 16", "d20" = "Day 20", "d21" = "Day 21"),
feed_treat = c("HF_CTRL" = "HF-CTRL","HF_PFOS"="HF-PFOS","LF_CTRL"="LF-CTRL","LF_PFOS"="LF-PFOS"))) +
ggsci::scale_color_d3(palette = "category20") +
ggsci::scale_fill_d3(palette = "category20") +
guides(fill=guide_legend(ncol=2), color=guide_legend(ncol=2)) +
clean_theme()
p
p.fig <- p + theme_pubr(legend = "right", border = TRUE) + theme(axis.text.x = element_text(angle = 90))
if (!file.exists(paste0("plots/relative_abundance"))) dir.create(file.path(getwd(), paste0("plots/relative_abundance")))
ggsave(filename = "plots/figures/Genus_abundance_ileum.png", plot = p.fig, device = "png", units = "mm", width = 300, height = 185, dpi = 300)
ggsave(filename = "plots/figures/Genus_abundance_ileum.pdf", plot = p.fig, device = "pdf", units = "mm", width = 300, height = 185, dpi = 300)
# print tax table
tax <- dat.sort %>% distinct(Taxa,.keep_all = T) %>% select(Taxa, Kingdom, Phylum, Class, Order,Family,Genus)  %>% arrange(Taxa)
kable(tax,digits = 2,caption = paste("Taxa plotted", sep = " ")) %>%
kable_classic(full_width = F, position = "left")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
# load data
load("R_objects/Agglomerated_Cecum.RData")
params <- readRDS("R_objects/params_description.RDS")
# Remove samples with missing data
phy.use <- prune_samples(sample_names(phy.ge)[!is.na(sample_data(phy.ge)[,params$group_var]) & !is.na(sample_data(phy.ge)[,params$time_var])], phy.ge)
# Transform data
phy.rel <- transform_sample_counts(phy.use, fun = function(x) x/sum(x)*100)
dat <- psmelt(phy.rel)
# summarise per sample
sumsample <-
dat %>%
filter(Abundance > 0) %>%
group_by(Sample, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(pct_0 = n(),
pct_0.1 = sum(Abundance < 0.1),
pct_0_1 = sum(Abundance >= 0.1 & Abundance < 1),
pct_1_10 = sum(Abundance >= 1 & Abundance < 10),
pct_10 = sum(Abundance > 10)) %>%
pivot_longer(starts_with("pct"),
names_to = c("Cutoff"),
values_to = "Count") %>%
group_by(Cutoff, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(mean = round(mean(Count),2),
sd = round(sd(Count),2))
# summarise total
sumall <- dat %>%
filter(Abundance > 0) %>%
group_by(OTU, .data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(Abundance = mean(Abundance)) %>%
group_by(.data[[params$group_var]], .data[[params$time_var]]) %>%
summarise(pct_0 = n(),
pct_0.1 = sum(Abundance < 0.1),
pct_0_1 = sum(Abundance >= 0.1 & Abundance < 1),
pct_1_10 = sum(Abundance >= 1 & Abundance < 10),
pct_10 = sum(Abundance > 10)) %>%
pivot_longer(starts_with("pct"),
names_to = c("Cutoff"),
values_to = "n")
# Combine
output <- full_join(sumall, sumsample) %>%
pivot_wider(id_cols = c(Cutoff, .data[[params$time_var]]),
names_from = .data[[params$group_var]],
values_from = c(n, mean, sd),
names_vary = "slowest") %>%
mutate(Cutoff=factor(Cutoff))
levels(output$Cutoff) <- c("All", "n < 0.1%", "0.1% < n < 1.0%", "1.0% < n < 10%", "10%  < n")
# Create output table
kable(output, row.names = F,digits = 2, caption = 'Count of genera in general and per sample',align = "r") %>%
kable_classic(full_width = F, position = "left")
# Filter by abundance, then rank
phy.top <- filter_abundance(phy.rel, group = params$group_var,includes = "any") %>% filter_rank(group = params$time_var, min.rank = 6, includes = "any")
#Melt data
dat <- suppressWarnings(psmelt(phy.top))
# Prevent duplicate column names
colnames(dat)[colnames(dat) %in% c("Taxa","SampleID")] <- paste(colnames(dat)[colnames(dat) %in% c("Taxa","SampleID")], "old", sep = "_")
# Rename relevant columns
colnames(dat)[c(1,4)] <- c("Taxa","SampleID")
# Sort taxa
dat.sort <- sort_taxa(dat)
# rename taxa
levels(dat.sort$Taxa) <- LETTERS[seq(length(levels(dat.sort$Taxa)))]
# ensure that the variables are factors
dat.sort[,params$time_var] <- factor(dat.sort[,params$time_var])
dat.sort[,params$subject_var] <- factor(dat.sort[,params$subject_var])
dat.sort[,params$group_var] <- factor(dat.sort[,params$group_var])
# Create plot
p <- ggplot(dat.sort, aes(x = .data[[params$subject_var]],
y = Abundance,
fill = Taxa,
color = Taxa)) +
geom_col() +
xlab("") +
facet_grid(day ~ feed_treat,
space = "free_x",scales = "free_x",
labeller = labeller(day = c("d0" = "Day 0", "d08" = "Day 8", "d12" = "Day 12", "d16" = "Day 16", "d20" = "Day 20", "d21" = "Day 21"),
feed_treat = c("HF_CTRL" = "HF-CTRL","HF_PFOS"="HF-PFOS","LF_CTRL"="LF-CTRL","LF_PFOS"="LF-PFOS"))) +
ggsci::scale_color_d3(palette = "category20") +
ggsci::scale_fill_d3(palette = "category20") +
guides(fill=guide_legend(ncol=2), color=guide_legend(ncol=2)) +
clean_theme()
p
p.fig <- p + theme_pubr(legend = "right", border = TRUE) + theme(axis.text.x = element_text(angle = 90))
if (!file.exists(paste0("plots/relative_abundance"))) dir.create(file.path(getwd(), paste0("plots/relative_abundance")))
ggsave(filename = "plots/figures/Genus_abundance_caecum.png", plot = p.fig, device = "png", units = "mm", width = 300, height = 185, dpi = 300)
ggsave(filename = "plots/figures/Genus_abundance_caecum.pdf", plot = p.fig, device = "pdf", units = "mm", width = 300, height = 185, dpi = 300)
# print tax table
tax <- dat.sort %>% distinct(Taxa,.keep_all = T) %>% select(Taxa, Kingdom, Phylum, Class, Order,Family,Genus)  %>% arrange(Taxa)
kable(tax,digits = 2,caption = paste("Taxa plotted", sep = " ")) %>%
kable_classic(full_width = F, position = "left")
# clear the environment and release memory
rm(list = ls(all.names = TRUE))
invisible(gc())
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyverse)
library(phyloseq)
library(decontam)
library(pals)
library(ggpubr)
library(vegan)
library(phangorn)
library(kableExtra)
library(plotly)
library(rstatix)
library(forcats)
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(DAtest)
library(ggrepel)
# Create used folders if missing
if (!file.exists("R_objects")) dir.create(file.path(getwd(), "R_objects"))
if (!file.exists("plots")) dir.create(file.path(getwd(), "plots"))
if (!file.exists("plots/animal_data")) dir.create(file.path(getwd(), "plots/animal_data"))
if (!file.exists("plots/animal_data/pH")) dir.create(file.path(getwd(), "plots/animal_data/pH"))
if (!file.exists("plots/animal_data/transit")) dir.create(file.path(getwd(), "plots/animal_data/transit"))
if (!file.exists("plots/animal_data/pfos")) dir.create(file.path(getwd(), "plots/animal_data/pfos"))
if (!file.exists("plots/animal_data/weight")) dir.create(file.path(getwd(), "plots/animal_data/weight"))
if (!file.exists("plots/animal_data/scfa")) dir.create(file.path(getwd(), "plots/animal_data/scfa"))
if (!file.exists("scripts")) dir.create(file.path(getwd(), "scripts"))
# Save params
saveRDS(params, file = "R_objects/animal_params.RDS")
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- dat
#dat.clean <- dat %>% select_if(~ !any(is.na(.)))
#dat.clean <- subset(dat, !dat$rat_name %in% c("R01","R30"))
# Set names of variables
PREDICTOR <- "feedtreat"#c("treatment","pfos","van")
OUTCOME <- "bw_gain08"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
summary(dat.clean$bw_gain08)
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- dat
#dat.clean <- dat %>% select_if(~ !any(is.na(.)))
#dat.clean <- subset(dat, !dat$rat_name %in% c("R01","R30"))
# Set names of variables
PREDICTOR <- "feedtreat"#c("treatment","pfos","van")
OUTCOME <- "bw_gain08"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = c("mean_sd","min","max"))
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- dat
#dat.clean <- dat %>% select_if(~ !any(is.na(.)))
#dat.clean <- subset(dat, !dat$rat_name %in% c("R01","R30"))
# Set names of variables
PREDICTOR <- "feedtreat"#c("treatment","pfos","van")
OUTCOME <- "bw_gain08"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = c("mean_sd"))
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = c("full"))
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = PREDICTOR[1],
facet.by = if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Subset
dat.clean <- subset(dat, !is.na(bw_gain021))
# Set names of variables
PREDICTOR <- "feedtreat"#c("treatment","pfos","van")
OUTCOME <- "bw_gain021"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = c("full"))
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- subset(dat, !is.na(cecum_norm))
# Set names of variables
PREDICTOR <- c("treatment","feed","dissection")
OUTCOME <- "cecum_wtbw"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# SUmmary of original weight in grams
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(cecum_wt), type = "mean_sd")
# SUmmary of original weight in grams
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(cecum_wt, type = "mean_sd")
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- subset(dat, !is.na(cecum_norm))
# Set names of variables
PREDICTOR <- c("treatment","feed","dissection")
OUTCOME <- "cecum_wtbw"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# SUmmary of original weight in grams
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(cecum_wt, type = "mean_sd")
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(cecum_wt, type = "full")
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
dat.clean <- subset(dat, !is.na(cecum_norm))
# Set names of variables
PREDICTOR <- c("treatment","feed","dissection")
OUTCOME <- "liver_wtbw"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
# SUmmary of original weight in grams
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(liver_wt, type = "mean_sd")
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(liver_wt, type = "full")
# Load data
load("R_objects/SCFA_data.Rdata")
# Prepare data for faceted concentrations plots
dat.conc <- dat.clean %>% pivot_longer(., cols = c(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, hexanoic), names_to = "compound", values_to = "mM") %>% mutate("comp_name" = case_when(compound == "formic" ~ "Formate", compound == "acetic" ~ "Acetate", compound == "propanoic" ~ "Propionate", compound == "m2_propanoic" ~ "Isobutyrate", compound == "butanoic" ~ "Butyrate", compound == "m3_butanoic" ~ "Isovalerate",compound == "pentanoic" ~ "Valerate", compound == "m4_pentanoic" ~ "Isocaproate", compound == "hexanoic" ~ "Caproate", compound == "heptanoic" ~ "Enanthate"))
dat.conc <- subset(dat.conc, !is.na(mM))
# Set names of variables
PREDICTOR <- c("feedtreat","comp_name") #"matfeed"
OUTCOME <- "mM"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.conc %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dat.conc %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "full")
# Test for outliers
dat.conc %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Check normality
# Build the linear model
model  <- lm(FORMULA, data = dat.conc)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
# Check the homogeneity of variances with Levene's test
dat.conc %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.conc %>% levene_test(FORMULA) %>% pull(p) > 0.05
# Load data
load("R_objects/SCFA_data.Rdata")
# Prepare data for faceted concentrations plots
dat.conc <- dat.clean %>% pivot_longer(., cols = c(acetic, formic, propanoic, m2_propanoic, butanoic, m3_butanoic, pentanoic, hexanoic), names_to = "compound", values_to = "mM") %>% mutate("comp_name" = case_when(compound == "formic" ~ "Formate", compound == "acetic" ~ "Acetate", compound == "propanoic" ~ "Propionate", compound == "m2_propanoic" ~ "Isobutyrate", compound == "butanoic" ~ "Butyrate", compound == "m3_butanoic" ~ "Isovalerate",compound == "pentanoic" ~ "Valerate", compound == "m4_pentanoic" ~ "Isocaproate", compound == "hexanoic" ~ "Caproate", compound == "heptanoic" ~ "Enanthate"))
dat.conc <- subset(dat.conc, !is.na(mM))
# Set names of variables
PREDICTOR <- c("feedtreat","comp_name") #"matfeed"
OUTCOME <- "mM"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.conc %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dat.conc %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "full")
dat.conc %>% group_by(across(all_of(c("feedtreat","comp_name","dissection")))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dat.conc %>% group_by(across(all_of(c("feedtreat","comp_name","dissection")))) %>% get_summary_stats(!!sym(OUTCOME), type = "full")
# Test for outliers
dat.conc %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Check normality
# Build the linear model
model  <- lm(FORMULA, data = dat.conc)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
# Check the homogeneity of variances with Levene's test
dat.conc %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.conc %>% levene_test(FORMULA) %>% pull(p) > 0.05
