PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(c("feed","grfeed","treatment")))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dat.clean %>% group_by(across(all_of(c("feed","grfeed","treatment")))) %>% get_summary_stats(!!sym(OUTCOME), type = "full")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = "group",#if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = "feedtreat",#PREDICTOR[1],
facet.by = "dissection",#if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Check normality
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
# Check the homogeneity of variances with Levene's test
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
# Save dat.clean
save(dat.clean, file = "plots/animal_data/pH/ph_data.Rdata")
# load data
load("R_objects/animal_data.Rdata")
# Isolate pH data and pivor longer
dat.clean <- dat %>% select(rat_name, treatment, feed, feedtreat, feedtreatday, dissection, pH_je_up, pH_je_down, pH_ileum, pH_cecum) %>% pivot_longer(., cols = c(pH_je_up, pH_je_down, pH_ileum, pH_cecum), names_to = "group", values_to = "pH")
# Remove rows with NA
dat.clean <- subset(dat.clean, !is.na(pH))
for (i in dat.clean$rat_name) {
dat.clean$grfeed <- paste0(dat.clean$group,"_",dat.clean$feed)
dat.clean$grday <- paste0(dat.clean$group,"_",dat.clean$dissection)
dat.clean$feedday <-paste0(dat.clean$feed,"_",dat.clean$dissection)
}
df_order <- c("pH_je_up","pH_je_down","pH_ileum","pH_cecum")
dat.clean$group <- factor(as.character(dat.clean$group), levels = df_order)
# Set names of variables
PREDICTOR <- "grfeed"
OUTCOME <- "pH"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(c("feed","grfeed","treatment")))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dat.clean %>% group_by(across(all_of(c("feed","grfeed","treatment")))) %>% get_summary_stats(!!sym(OUTCOME), type = "full")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = "group",#if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = "feedtreat",#PREDICTOR[1],
facet.by = "dissection",#if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Check normality
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
# Check the homogeneity of variances with Levene's test
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
# Save dat.clean
save(dat.clean, model, EQUAL.VAR, FORMULA,OUTCOME,PREDICTOR,PREDICTOR.F,SUBJECT, file = "plots/animal_data/pH/ph_data.Rdata")
# load data
load("R_objects/animal_data.Rdata")
# Isolate pH data and pivor longer
dat.clean <- dat %>% select(rat_name, treatment, feed, feedtreat, feedtreatday, dissection, pH_je_up, pH_je_down, pH_ileum, pH_cecum) %>% pivot_longer(., cols = c(pH_je_up, pH_je_down, pH_ileum, pH_cecum), names_to = "group", values_to = "pH")
# Remove rows with NA
dat.clean <- subset(dat.clean, !is.na(pH))
for (i in dat.clean$rat_name) {
dat.clean$grfeed <- paste0(dat.clean$group,"_",dat.clean$feed)
dat.clean$grday <- paste0(dat.clean$group,"_",dat.clean$dissection)
dat.clean$feedday <-paste0(dat.clean$feed,"_",dat.clean$dissection)
}
df_order <- c("pH_je_up","pH_je_down","pH_ileum","pH_cecum")
dat.clean$group <- factor(as.character(dat.clean$group), levels = df_order)
# Set names of variables
PREDICTOR <- "grfeed"
OUTCOME <- "pH"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(c("feed","grfeed","treatment")))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dat.clean %>% group_by(across(all_of(c("feed","grfeed","treatment")))) %>% get_summary_stats(!!sym(OUTCOME), type = "full")
# Create plot
bxp <- dat.clean %>%
ggboxplot(x = "group",#if_else(length(PREDICTOR) > 1, PREDICTOR[2],PREDICTOR[1]),
y = OUTCOME,
color = "feedtreat",#PREDICTOR[1],
facet.by = "dissection",#if(length(PREDICTOR) == 3) PREDICTOR[3],
palette = params$COL)
bxp
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Check normality
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
# Check the homogeneity of variances with Levene's test
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
# Save dat.clean
save(dat.clean, model, EQUAL.VAR, FORMULA,OUTCOME,PREDICTOR,PREDICTOR.F,SUBJECT, file = "plots/animal_data/pH/ph_data.Rdata")
res.aov <- dat.clean %>% kruskal_test(FORMULA)
res.aov
dat.clean %>% kruskal_effsize(FORMULA)
# pairwise comparisons
pwc <- dat.clean %>%
dunn_test(FORMULA, p.adjust.method = "fdr")
pwc
# ## Comparison for inner variable
stat.in <- dat.clean %>%
group_by(dissection,group) %>%
wilcox_test(pH ~ feedday) %>%
adjust_pvalue(method = "BH") %>%
add_significance("p.adj") %>%
add_xy_position(x = "group", dodge = 0.8) %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
## Comparison for outer variable
stat.out <- dat.clean %>%
group_by(dissection) %>%
kruskal_test(pH ~ group) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
pwc1 <- dat.clean %>%
group_by(dissection) %>%
dunn_test(pH ~ group) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE) %>%
add_xy_position(x = "group", dodge = 0.8)
pwc1
# Test between days
stat.out2 <- dat.clean %>%
# group_by(feed) %>%
kruskal_test(pH ~ grday) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
pwc2 <- dat.clean %>%
# group_by(feed) %>%
dunn_test(pH ~ grday) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE) %>%
add_xy_position(x = "group", dodge = 0.8)
pwc2
# Adjust x positions of inner statistics
stat.in$xmin <- c(0.8,1.8,2.8,3.8,0.8,1.8,2.8,3.8)
stat.in$xmax <- c(1.2,2.2,3.2,4.2,1.2,2.2,3.2,4.2)
# Create plot
p <- ggplot(dat.clean, aes(x = group, y = pH)) +
geom_boxplot(aes(fill = feed, color = feed), outlier.shape = NA) +
geom_point(aes(color = feed), position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.8), size = 0.8) +
scale_color_manual(values = c("black","black","black","black")) +
scale_fill_manual(values = params$COLFEED, name = "Feed") +
facet_wrap(.~dissection, ncol = 2, nrow = 1, labeller = labeller("dissection" = c("d08" = "Day 8","d21" = "Day 21"))) +
scale_y_continuous(name = "pH", breaks = seq(6,12,1), limits = c(5.5,10)) +
scale_x_discrete(name = "Compartment", labels = c("pH_je_up" = "Jejunum\nUpper","pH_je_down" = "Jejunum\nLower","pH_ileum" = "Ileum","pH_cecum" = "Cecum")) +
theme_pubr(legend = "top") +
guides(color = "none", linetype = "none") +
theme(axis.title.x = element_blank())
p
# Add statistics to plot
p.stat <- p + stat_pvalue_manual(stat.in, tip.length = 0, hide.ns = TRUE, color = "red") +
stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE, y.position = c(9,9.3,9,9.3,9.6,8.7,9.9))
p.stat
# Save plot
suppressMessages(ggsave(filename = "plots/animal_data/pH/pH_all_groups_v2.pdf", plot = p.stat, device = "pdf", dpi = 300, units = "mm", height = 100, width = 200))
suppressMessages(ggsave(filename = "plots/animal_data/pH/pH_all_groups_v2.png", plot = p.stat, device = "png", dpi = 300, units = "mm", height = 100, width = 200))
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
# Load data
load("plots/animal_data/pH/ph_data.Rdata")
## Comparison for inner variable
stat.in <- dat.clean %>%
group_by(dissection,group) %>%
kruskal_test(pH ~ feedtreat) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
pwc1 <- dat.clean %>%
group_by(dissection,group) %>%
dunn_test(pH ~ feedtreat) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc1
## Comparison for outer variable
stat.out <- dat.clean %>%
group_by(dissection) %>%
kruskal_test(pH ~ group) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
pwc2 <- dat.clean %>%
group_by(dissection) %>%
dunn_test(pH ~ group) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc2
## Calculate positions statistics on plot
pwc1 <- pwc1 %>% add_xy_position(x = "group", dodge = 0.8)
pwc2 <- pwc2 %>% add_xy_position(x = "group")
#pwc2$y.position <- max(pwc1$y.position)*1.1
# Create plot ##"HF_d08" = "#ddffdd","HF_d21" = "#aaccaa","LF_d08" = "#ddddff","LF_d21" = "#aaaacc"
p <- ggboxplot(dat.clean, x = "group", y = "pH",
fill = "feedtreat",
color = "feedtreat",
add = "jitter",
add.params = list(size = 0.8)) +
theme_pubr(legend = "top") +
scale_color_manual(values = c("black","black","black","black")) +
scale_fill_manual(values = c("HF_d08" = "#d2e9cc","HF_d21" = "#32a248","LF_d08" = "#bde7fb","LF_d21" = "#1879b7"), name = "Feed per day", labels = c("HF Day 8","HF Day 21","LF Day 8","LF Day 21")) +
scale_alpha_manual(values = c(1,0.5,1,0.5)) +
scale_y_continuous(name = "pH", breaks = seq(6,12,1)) +
scale_x_discrete(name = "Compartment", labels = c("pH_je_up" = "Jejunum\nUpper","pH_je_down" = "Jejunum\nLower","pH_ileum" = "Ileum","pH_cecum" = "Cecum")) +
theme(axis.title.x = element_blank()) +
guides(color = "none") +
facet_wrap("dissection ~.", ncol = 2, nrow = 1)
p.stat <- p + stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE, color = "red") + #y.position = c(8.5,8.2,9.2,9.5,9.8,10.1)
stat_pvalue_manual(pwc2, tip.length = 0, hide.ns = TRUE) #, y.position = c(10.9,11.2,10.3,10.6)
p.stat
#"HF_d08" = "#b4d88a","HF_d21" = "#30a148","LF_d08" = "#a5cee3","LF_d21" = "#1778b6"
suppressMessages(ggsave(filename = "plots/animal_data/pH/pH_all_pfos.pdf", plot = p.stat, device = "pdf", dpi = 300, units = "mm", height = 100, width = 200))
suppressMessages(ggsave(filename = "plots/animal_data/pH/pH_all_pfos.png", plot = p.stat, device = "png", dpi = 300, units = "mm", height = 100, width = 200))
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
# Load data
load("plots/animal_data/pH/ph_data.Rdata")
## Comparison for inner variable
stat.in <- dat.clean %>%
group_by(feed,group) %>%
kruskal_test(pH ~ feedtreat) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
pwc1 <- dat.clean %>%
group_by(feed,group) %>%
dunn_test(pH ~ feedtreat) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc1
## Comparison for outer variable
stat.out <- dat.clean %>%
group_by(feed) %>%
kruskal_test(pH ~ group) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
pwc2 <- dat.clean %>%
group_by(feed) %>%
dunn_test(pH ~ group) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc2
## Calculate positions statistics on plot
pwc1 <- pwc1 %>% add_xy_position(x = "group", dodge = 0.8)
pwc2 <- pwc2 %>% add_xy_position(x = "group")
#pwc2$y.position <- max(pwc1$y.position)*1.1
# Create plot
p <- ggboxplot(dat.clean, x = "group", y = "pH",
fill = "feedtreatday",
color = "feedtreatday",
add = "jitter",
add.params = list(size = 0.8)) +
theme_pubr(legend = "top") +
scale_color_manual(values = c("black","black","black","black","black","black","black","black")) +
scale_alpha_manual(values = c(1,0.5,1,0.5)) +
scale_y_continuous(name = "pH", breaks = seq(6,12,1)) +
scale_x_discrete(name = "Compartment", labels = c("pH_je_up" = "Jejunum\nUpper","pH_je_down" = "Jejunum\nLower","pH_ileum" = "Ileum","pH_cecum" = "Cecum")) +
theme(axis.title.x = element_blank()) +
guides(color = "none") +
facet_wrap("feed ~.", ncol = 2, nrow = 1)
p.stat <- p + stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE, color = "red") + #y.position = c(8.5,8.2,9.2,9.5,9.8,10.1)
stat_pvalue_manual(pwc2, tip.length = 0, hide.ns = TRUE) #, y.position = c(10.9,11.2,10.3,10.6)
p.stat
suppressMessages(ggsave(filename = "plots/animal_data/pH/pH_all_pfos.pdf", plot = p.stat, device = "pdf", dpi = 300, units = "mm", height = 100, width = 200))
suppressMessages(ggsave(filename = "plots/animal_data/pH/pH_all_pfos.png", plot = p.stat, device = "png", dpi = 300, units = "mm", height = 100, width = 200))
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
# load data
load("R_objects/animal_data.Rdata")
#Isolate transit time data
dat.clean <- dat %>% select(rat_name, treatment, feed, feedtreat, dissection, cage, transit_0, transit_7, transit_20) %>% pivot_longer(., cols = c(transit_0, transit_7, transit_20), names_to = "transit", values_to = "min")
dat.clean <- dat.clean %>%
mutate("day" = case_when(transit == "transit_0" ~ "d0",
transit == "transit_7" ~ "d07",
transit == "transit_20" ~ "d20"))
dat.clean <- subset(dat.clean, !is.na(min))
# Set names of variables
PREDICTOR <- c("day","feedtreat")#"day"
OUTCOME <- "min"
SUBJECT <- "rat_name"
# Create formula
PREDICTOR.F <- ifelse(length(PREDICTOR) > 1, paste(PREDICTOR, collapse = "*"), PREDICTOR)
FORMULA <- as.formula(paste(OUTCOME,PREDICTOR.F, sep = " ~ "))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "mean_sd")
dat.clean %>% group_by(across(all_of(PREDICTOR))) %>% get_summary_stats(!!sym(OUTCOME), type = "full")
# Test for outliers
dat.clean %>%
group_by(across(all_of(PREDICTOR))) %>%
identify_outliers(!!sym(OUTCOME))
# Check normality
# Build the linear model
model  <- lm(FORMULA, data = dat.clean)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
# Check the homogeneity of variances with Levene's test
dat.clean %>% levene_test(FORMULA)
# Save result
EQUAL.VAR <- dat.clean %>% levene_test(FORMULA) %>% pull(p) > 0.05
if(EQUAL.VAR) {
res.aov <- dat.clean %>% anova_test(FORMULA)
res.aov
} else {
res.aov <- dat.clean %>% welch_anova_test(FORMULA)
res.aov
}
if(EQUAL.VAR) {
pwc <- dat.clean %>% tukey_hsd(FORMULA)
pwc
} else {
pwc <- dat.clean %>% games_howell_test(FORMULA)
pwc
}
## Comparison for inner variable
stat.in <- dat.clean %>%
group_by(day) %>%
anova_test(min ~ feedtreat) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
pwc1 <- dat.clean %>%
group_by(day) %>%
tukey_hsd(min ~ feedtreat) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc1
## Comparison for outer variable
stat.out <- dat.clean %>%
anova_test(min ~ day) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
pwc2 <- dat.clean %>%
tukey_hsd(min ~ day) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc2
## Calculate positions statistics on plot
pwc1 <- pwc1 %>% add_xy_position(x = "day", dodge = 0.8)
pwc2 <- pwc2 %>% add_xy_position(x = "day")
pwc2$y.position <- max(pwc1$y.position)*1.1
# Create list of mean and sd for plotting
dat.sum2 <- dat.clean %>% group_by(across(all_of(c("feedtreat","day")))) %>% get_summary_stats(!!sym("min"), type = "mean_sd")
# Plot
p <- ggplot() +
geom_crossbar(data=dat.sum2,
aes(x = day, y = mean, ymin = mean, ymax = mean, color = feedtreat),
linewidth=0.1, width = .7,
position = position_dodge(width = 0.8)) +
geom_errorbar(data=dat.sum2,
aes(x = day,y = mean, ymin = mean-sd, ymax = mean+sd, color = feedtreat),
linewidth=0.1, width = .3,
position = position_dodge(width = 0.8)) +
geom_jitter(data = dat.clean, aes(x = day, y = min, color = feedtreat), position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.8)) +
scale_x_discrete(name = "Day", labels = c("Day 0","Day 7","Day 21")) +
scale_y_continuous(name = "Transit time per rat (Minutes)", breaks = seq(360,1120,60)) +
scale_color_manual(values = params$COL1, name = "Group", labels = c("HF-CTRL","HF-PFOS","LF-CTRL","LF-PFOS")) +
theme_pubr() +
theme(axis.title.x = element_blank())
p
p.stat <- p + stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE, y.position = 1030, color = "red") +
stat_pvalue_manual(pwc2, tip.length = 0, hide.ns = TRUE,y.position = c(1110,1140,1080))
p.stat
# Save output
suppressMessages(ggsave(filename = "plots/animal_data/transit/transit_time_feedtreat.pdf", plot = p.stat, device = "pdf", dpi = 300, units = "mm", height = 100, width = 130))
suppressMessages(ggsave(filename = "plots/animal_data/transit/transit_time_feedtreat.png", plot = p.stat, device = "png", dpi = 300, units = "mm", height = 100, width = 130))
## Comparison for inner variable
stat.in <- dat.clean %>%
group_by(day) %>%
t_test(min ~ feed,
paired = FALSE, var.equal = EQUAL.VAR,
detailed = TRUE, alternative = "two.sided") %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.in
## Comparison for outer variable
stat.out <- dat.clean %>%
anova_test(min ~ day) %>%
add_significance() %>%
p_format("p", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
stat.out
pwc2 <- dat.clean %>%
tukey_hsd(min ~ day) %>%
add_significance() %>%
p_format("p.adj", accuracy = 0.001, trailing.zero = TRUE, new.col = TRUE)
pwc2
## Calculate positions statistics on plot
stat.in <- stat.in %>% add_xy_position(x = "day", dodge = 0.8)
pwc2 <- pwc2 %>% add_xy_position(x = "day")
pwc2$y.position <- max(stat.in$y.position)*1.1
# Create list of mean and sd for plotting
dat.sum2 <- dat.clean %>% group_by(across(all_of(c("feed","day")))) %>% get_summary_stats(!!sym("min"), type = "mean_sd")
# Plot
p <- ggplot() +
geom_crossbar(data=dat.sum2,
aes(x = day, y = mean, ymin = mean, ymax = mean, color = feed),
linewidth=0.1, width = .7,
position = position_dodge(width = 0.8)) +
geom_errorbar(data=dat.sum2,
aes(x = day,y = mean, ymin = mean-sd, ymax = mean+sd, color = feed),
linewidth=0.1, width = .3,
position = position_dodge(width = 0.8)) +
geom_jitter(data = dat.clean, aes(x = day, y = min, color = feed), position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.8)) +
scale_x_discrete(name = "Day", labels = c("Day 0","Day 7","Day 21")) +
scale_y_continuous(name = "Transit time per rat (Minutes)", breaks = seq(360,1120,60)) +
scale_color_manual(values = params$COLFEED, name = "Feed", labels = c("HF","LF")) +
theme_pubr() +
theme(axis.title.x = element_blank()) +
guides(color = guide_legend(override.aes = list(size = 4, shape = 15, linetype = 0)))
p
p.stat <- p + stat_pvalue_manual(stat.in, tip.length = 0, hide.ns = TRUE, y.position = 1030, color = "red") +
stat_pvalue_manual(pwc2, tip.length = 0, hide.ns = TRUE,y.position = c(1110,1140,1080))
p.stat
# Save output
suppressMessages(ggsave(filename = "plots/animal_data/transit/transit_time_feed.pdf", plot = p.stat, device = "pdf", dpi = 300, units = "mm", height = 100, width = 130))
suppressMessages(ggsave(filename = "plots/animal_data/transit/transit_time_feed.png", plot = p.stat, device = "png", dpi = 300, units = "mm", height = 100, width = 130))
# clear the environment and release memory
rm(list = ls(all.names = TRUE)[ls(all.names = TRUE) != "params"])
invisible(gc())
# load data
load("R_objects/animal_data.Rdata")
# Create new dataframe with pfos data
dat.clean <- dat %>% subset(treatment == "PFOS") %>% select("rat_name","dissection","treatment","feed","pfos_total_mg","pfos_serum8_mg","pfos_serum21_mg","pfos_liver_mg","pfos_brain_ug")
dat.clean["pfos_brain_ug"][is.na(dat.clean["pfos_brain_ug"])] <- 0
# Calculate total and PFOS not accounted for (NA)
for (i in dat.clean$rat_name) {
dat.clean$feedday <- paste0(dat.clean$feed,"_",dat.clean$dissection)
dat.clean$pfos_brain_mg <- dat.clean$pfos_brain_ug/1000
dat.clean$pfos_total_d8 <- dat.clean$pfos_liver_mg + dat.clean$pfos_serum8_mg + dat.clean$pfos_brain_mg
dat.clean$pfos_total_d21 <- dat.clean$pfos_liver_mg + dat.clean$pfos_serum21_mg + dat.clean$pfos_brain_mg
dat.clean$pfos_na_d8 <- dat.clean$pfos_total_mg - dat.clean$pfos_total_d8
dat.clean$pfos_na_d21 <- dat.clean$pfos_total_mg - dat.clean$pfos_total_d21
}
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Set names of variables
PREDICTOR <- "dissection"
OUTCOME <- "pfos_brain_ugg"
SUBJECT <- "rat_name"
# Subset to a specific varible
dat.clean <- subset(dat, treatment == "PFOS")
# Remove rows with NA
dat.clean <- subset(dat.clean, !is.na(pfos_brain_ugg))
# Will yoou run a paired test? (set variable to `TRUE` or `FALSE`)
PAIRED <- FALSE
# Create formula
FORMULA <- as.formula(paste(OUTCOME, PREDICTOR, sep = "~"))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(c("feed","dissection")))) %>% get_summary_stats(!!sym(OUTCOME), type = "full") %>% select("feed","dissection","n","min","max","mean","sd","se")
# load data
load("R_objects/animal_data.Rdata")
params <- readRDS("R_objects/animal_params.RDS")
# Set names of variables
PREDICTOR <- "dissection"
OUTCOME <- "pfos_brain_ugg"
SUBJECT <- "rat_name"
# Subset to a specific varible
dat.clean <- subset(dat, treatment == "PFOS")
# Remove rows with NA
dat.clean <- subset(dat.clean, !is.na(pfos_brain_ugg))
# Will yoou run a paired test? (set variable to `TRUE` or `FALSE`)
PAIRED <- FALSE
# Create formula
FORMULA <- as.formula(paste(OUTCOME, PREDICTOR, sep = "~"))
# Summary samples in groups
dat.clean %>% group_by(across(all_of(c("feed","dissection")))) %>% get_summary_stats("pfos_brain_ugg", type = "full") %>% select("feed","dissection","n","min","max","mean","sd","se")
# Summary samples in groups
dat.clean %>% group_by(across(all_of(c("feed","dissection")))) %>% get_summary_stats(!!sym(OUTCOME), type = "full") %>% select("feed","dissection","n","min","max","mean","sd","se")
# Summary samples in groups
dat.clean %>% group_by(across(all_of("feedtreatday"))) %>% get_summary_stats(!!sym(OUTCOME), type = "full") %>% select("feed","dissection","n","min","max","mean","sd","se")
